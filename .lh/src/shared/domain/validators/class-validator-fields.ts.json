{
    "sourceFile": "src/shared/domain/validators/class-validator-fields.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1694359185164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1695180568515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,21 @@\n import { validateSync } from \"class-validator\";\n import ValidatorFieldsInterface, {\n-  FieldsErrors,\n } from \"./validator-fields-interface\";\n \n-export abstract class ClassValidatorFields<PropsValidated>\n-  implements ValidatorFieldsInterface<PropsValidated>\n-{\n-  errors: FieldsErrors = null;\n-  validatedData: PropsValidated = null;\n-\n-  validate(data: any): boolean {\n-    const errors = validateSync(data);\n+export abstract class ClassValidatorFields\n+  implements ValidatorFieldsInterface {\n+  validate(notification: Notification, data: any, fields: string[]): boolean {\n+    const errors = validateSync(data, {\n+      groups: fields\n+    });\n     if (errors.length) {\n-      this.errors = {};\n       for (const error of errors) {\n         const field = error.property;\n-        this.errors[field] = Object.values(error.constraints);\n+        Object.values(error.constraints!).forEach((message) => {\n+          notification.addError(message, field)\n+        })\n       }\n-    } else {\n-      this.validatedData = data;\n     }\n     return !errors.length;\n   }\n }\n"
                },
                {
                    "date": 1695211877988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n import { validateSync } from \"class-validator\";\n-import ValidatorFieldsInterface, {\n-} from \"./validator-fields-interface\";\n+import { IValidatorFields } from \"./validator-fields-interface\";\n \n export abstract class ClassValidatorFields\n-  implements ValidatorFieldsInterface {\n+  implements IValidatorFields {\n   validate(notification: Notification, data: any, fields: string[]): boolean {\n     const errors = validateSync(data, {\n       groups: fields\n     });\n"
                },
                {
                    "date": 1695211900017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { validateSync } from \"class-validator\";\n import { IValidatorFields } from \"./validator-fields-interface\";\n+import { Notification } from \"./notification\";\n \n export abstract class ClassValidatorFields\n   implements IValidatorFields {\n   validate(notification: Notification, data: any, fields: string[]): boolean {\n"
                },
                {
                    "date": 1695212295958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,20 @@\n import { validateSync } from \"class-validator\";\n import { IValidatorFields } from \"./validator-fields-interface\";\n import { Notification } from \"./notification\";\n \n-export abstract class ClassValidatorFields\n-  implements IValidatorFields {\n+export abstract class ClassValidatorFields implements IValidatorFields {\n   validate(notification: Notification, data: any, fields: string[]): boolean {\n     const errors = validateSync(data, {\n-      groups: fields\n+      groups: fields,\n     });\n     if (errors.length) {\n       for (const error of errors) {\n         const field = error.property;\n         Object.values(error.constraints!).forEach((message) => {\n-          notification.addError(message, field)\n-        })\n+          notification.addError(message, field);\n+        });\n       }\n     }\n     return !errors.length;\n\\ No newline at end of file\n   }\n-}\n-\n-export default ClassValidatorFields;\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1694359185164,
            "name": "Commit-0",
            "content": "import { validateSync } from \"class-validator\";\nimport ValidatorFieldsInterface, {\n  FieldsErrors,\n} from \"./validator-fields-interface\";\n\nexport abstract class ClassValidatorFields<PropsValidated>\n  implements ValidatorFieldsInterface<PropsValidated>\n{\n  errors: FieldsErrors = null;\n  validatedData: PropsValidated = null;\n\n  validate(data: any): boolean {\n    const errors = validateSync(data);\n    if (errors.length) {\n      this.errors = {};\n      for (const error of errors) {\n        const field = error.property;\n        this.errors[field] = Object.values(error.constraints);\n      }\n    } else {\n      this.validatedData = data;\n    }\n    return !errors.length;\n  }\n}\n\nexport default ClassValidatorFields;"
        }
    ]
}