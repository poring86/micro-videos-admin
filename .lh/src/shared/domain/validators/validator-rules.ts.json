{
    "sourceFile": "src/shared/domain/validators/validator-rules.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1694312274201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1694315517310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,10 @@\n     return this\n   }\n \n   string(): Omit<this, 'string'> {\n-    if (!isEmpty(this.value) && typeof this.value !== 'string') {\n-      throw new ValidationError(`The ${this.property} must be a string`)\n+    if (!isEmpty(this.value) && typeof this.value !== \"string\") {\n+      throw new ValidationError(`The ${this.property} must be a string`);\n     }\n+    return this;\n   }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694315536447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,5 +23,21 @@\n       throw new ValidationError(`The ${this.property} must be a string`);\n     }\n     return this;\n   }\n+\n+  maxLength(max: number): Omit<this, 'maxLength'> {\n+    if (!isEmpty(this.value) && this.value.length > max) {\n+      throw new ValidationError(\n+        `The ${this.property} must be less or equal than ${max} characters`\n+      );\n+    }\n+    return this;\n+  }\n+\n+  boolean(): Omit<this, 'boolean'> {\n+    if (!isEmpty(this.value) && typeof this.value !== \"boolean\") {\n+      throw new ValidationError(`The ${this.property} must be a boolean`);\n+    }\n+    return this;\n+  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694316340097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,5 +39,12 @@\n       throw new ValidationError(`The ${this.property} must be a boolean`);\n     }\n     return this;\n   }\n+\n+  boolean(): Omit<this, 'boolean'> {\n+    if (!isEmpty(this.value) && typeof this.value !== \"boolean\") {\n+      throw new ValidationError(`The ${this.property} must be a boolean`);\n+    }\n+    return this;\n+  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694316723798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { isEmpty } from 'lodash'\n-import { ValidationError } from './validation.error'\n \n+\n export class ValidatorRules {\n   private constructor(\n     private value: any,\n     private property: string\n@@ -39,12 +39,5 @@\n       throw new ValidationError(`The ${this.property} must be a boolean`);\n     }\n     return this;\n   }\n-\n-  boolean(): Omit<this, 'boolean'> {\n-    if (!isEmpty(this.value) && typeof this.value !== \"boolean\") {\n-      throw new ValidationError(`The ${this.property} must be a boolean`);\n-    }\n-    return this;\n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694346661358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n-import { isEmpty } from 'lodash'\n+import { ValidationError } from \"../../domain/errors/validation-error\";\n \n \n-export class ValidatorRules {\n+class ValidatorRules {\n   private constructor(\n     private value: any,\n     private property: string\n   ) { }\n@@ -39,5 +39,11 @@\n       throw new ValidationError(`The ${this.property} must be a boolean`);\n     }\n     return this;\n   }\n-}\n\\ No newline at end of file\n+}\n+\n+export function isEmpty(value: any) {\n+  return value === undefined || value === null;\n+}\n+\n+export default ValidatorRules;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1694312274201,
            "name": "Commit-0",
            "content": "import { isEmpty } from 'lodash'\nimport { ValidationError } from './validation.error'\n\nexport class ValidatorRules {\n  private constructor(\n    private value: any,\n    private property: string\n  ) { }\n\n  static values(value: any, property: string) {\n    return new ValidatorRules(value, property)\n  }\n\n  required(): Omit<this, 'required'> {\n    if (this.value === null || this.value === undefined || this.value === '') {\n      throw new ValidationError(`The ${this.property} is required`)\n    }\n    return this\n  }\n\n  string(): Omit<this, 'string'> {\n    if (!isEmpty(this.value) && typeof this.value !== 'string') {\n      throw new ValidationError(`The ${this.property} must be a string`)\n    }\n  }\n}"
        }
    ]
}