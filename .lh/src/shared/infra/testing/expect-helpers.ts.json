{
    "sourceFile": "src/shared/infra/testing/expect-helpers.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1694447882602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1694458198984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,39 +10,43 @@\n expect.extend({\n   containsErrorMessages(expected: Expected, received: FieldsErrors) {\n     if (typeof expected === \"function\") {\n       try {\n-        expected()\n-        return isValid()\n+        expected();\n+        return isValid();\n       } catch (e) {\n-        const error = e as EntityValidationError\n-        return assertContainsErrorMessages(error.error, received)\n+        const error = e as EntityValidationError;\n+        return assertContainsErrorsMessages(error.error, received);\n       }\n     } else {\n-      const { validator, data } = expected\n-      const validated = validator.validate(data)\n+      const { validator, data } = expected;\n+      const validated = validator.validate(data);\n \n       if (validated) {\n-        return isValid()\n+        return isValid();\n       }\n \n-      return assertContainsErrorMessages(validator.errors, received)\n+      return assertContainsErrorsMessages(validator.errors, received);\n     }\n-  }\n-})\n+  },\n+});\n \n-function assertContainsErrorMessages(\n+function assertContainsErrorsMessages(\n   expected: FieldsErrors,\n   received: FieldsErrors\n ) {\n-  const isMatch = expect.objectContaining(received).asymmetricMatch(expected)\n-  return isMatch ? isValid() : {\n-    pass: false,\n-    message: () => `The validation errors not contains ${JSON.stringify(\n-      received\n-    )}. Current: ${JSON.stringify(expected)}`\n-  }\n+  const isMatch = expect.objectContaining(received).asymmetricMatch(expected);\n+\n+  return isMatch\n+    ? isValid()\n+    : {\n+      pass: false,\n+      message: () =>\n+        `The validation errors not contains ${JSON.stringify(\n+          received\n+        )}. Current: ${JSON.stringify(expected)}`,\n+    };\n }\n \n function isValid() {\n-  return { pass: false, message: () => \"\" }\n+  return { pass: true, message: () => \"\" };\n }\n"
                },
                {
                    "date": 1694458336968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,43 +10,39 @@\n expect.extend({\n   containsErrorMessages(expected: Expected, received: FieldsErrors) {\n     if (typeof expected === \"function\") {\n       try {\n-        expected();\n-        return isValid();\n+        expected()\n+        return isValid()\n       } catch (e) {\n-        const error = e as EntityValidationError;\n-        return assertContainsErrorsMessages(error.error, received);\n+        const error = e as EntityValidationError\n+        return assertContainsErrorMessages(error.error, received)\n       }\n     } else {\n-      const { validator, data } = expected;\n-      const validated = validator.validate(data);\n+      const { validator, data } = expected\n+      const validated = validator.validate(data)\n \n       if (validated) {\n-        return isValid();\n+        return isValid()\n       }\n \n-      return assertContainsErrorsMessages(validator.errors, received);\n+      return assertContainsErrorMessages(validator.errors, received)\n     }\n-  },\n-});\n+  }\n+})\n \n-function assertContainsErrorsMessages(\n+function assertContainsErrorMessages(\n   expected: FieldsErrors,\n   received: FieldsErrors\n ) {\n-  const isMatch = expect.objectContaining(received).asymmetricMatch(expected);\n-\n-  return isMatch\n-    ? isValid()\n-    : {\n-      pass: false,\n-      message: () =>\n-        `The validation errors not contains ${JSON.stringify(\n-          received\n-        )}. Current: ${JSON.stringify(expected)}`,\n-    };\n+  const isMatch = expect.objectContaining(received).asymmetricMatch(expected)\n+  return isMatch ? isValid() : {\n+    pass: false,\n+    message: () => `The validation errors not contains ${JSON.stringify(\n+      received\n+    )}. Current: ${JSON.stringify(expected)}`\n+  }\n }\n \n function isValid() {\n-  return { pass: true, message: () => \"\" };\n+  return { pass: false, message: () => \"\" }\n }\n"
                },
                {
                    "date": 1694458495649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,6 +43,6 @@\n   }\n }\n \n function isValid() {\n-  return { pass: false, message: () => \"\" }\n+  return { pass: true, message: () => \"\" };\n }\n"
                },
                {
                    "date": 1695224990128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,84 @@\n-import ClassValidatorFields from \"../../domain/validators/class-validator-fields\";\n-import { FieldsErrors } from \"../../domain/validators/validator-fields-interface\";\n-import { EntityValidationError } from \"../../domain/validators/valitation.error\";\n+//import { ClassValidatorFields } from \"../../domain/validators/class-validator-fields\";\n+//import { EntityValidationError } from \"../../domain/validators/validation.error\";\n+//import { FieldsErrors } from \"../../domain/validators/validator-fields-interface\";\n+import { Notification } from '../../domain/validators/notification';\n \n-type Expected = | {\n-  validator: ClassValidatorFields<any>\n-  data: any\n-} | (() => any)\n+// type Expected =\n+//   | {\n+//       validator: ClassValidatorFields<any>;\n+//       data: any;\n+//     }\n+//   | (() => any);\n \n expect.extend({\n-  containsErrorMessages(expected: Expected, received: FieldsErrors) {\n-    if (typeof expected === \"function\") {\n-      try {\n-        expected()\n-        return isValid()\n-      } catch (e) {\n-        const error = e as EntityValidationError\n-        return assertContainsErrorMessages(error.error, received)\n-      }\n-    } else {\n-      const { validator, data } = expected\n-      const validated = validator.validate(data)\n+  notificationContainsErrorMessages(\n+    expected: Notification,\n+    received: Array<string | { [key: string]: string[] }>,\n+  ) {\n+    const every = received.every((error) => {\n+      if (typeof error === 'string') {\n+        return expected.errors.has(error);\n+      } else {\n+        return Object.entries(error).every(([field, messages]) => {\n+          const fieldMessages = expected.errors.get(field) as string[];\n \n-      if (validated) {\n-        return isValid()\n+          return (\n+            fieldMessages &&\n+            fieldMessages.length &&\n+            fieldMessages.every((message) => messages.includes(message))\n+          );\n+        });\n       }\n+    });\n+    return every\n+      ? { pass: true, message: () => '' }\n+      : {\n+        pass: false,\n+        message: () =>\n+          `The validation errors not contains ${JSON.stringify(\n+            received,\n+          )}. Current: ${JSON.stringify(expected.toJSON())}`,\n+      };\n+  },\n+  // containsErrorMessages(expected: Expected, received: FieldsErrors) {\n+  //   if (typeof expected === \"function\") {\n+  //     try {\n+  //       expected();\n+  //       return isValid();\n+  //     } catch (e) {\n+  //       const error = e as EntityValidationError;\n+  //       return assertContainsErrorsMessages(error.error, received);\n+  //     }\n+  //   } else {\n+  //     const { validator, data } = expected;\n+  //     const validated = validator.validate(data);\n \n-      return assertContainsErrorMessages(validator.errors, received)\n-    }\n-  }\n-})\n+  //     if (validated) {\n+  //       return isValid();\n+  //     }\n \n-function assertContainsErrorMessages(\n-  expected: FieldsErrors,\n-  received: FieldsErrors\n-) {\n-  const isMatch = expect.objectContaining(received).asymmetricMatch(expected)\n-  return isMatch ? isValid() : {\n-    pass: false,\n-    message: () => `The validation errors not contains ${JSON.stringify(\n-      received\n-    )}. Current: ${JSON.stringify(expected)}`\n-  }\n-}\n+  //     return assertContainsErrorsMessages(validator.errors, received);\n+  //   }\n+  // },\n+});\n \n-function isValid() {\n-  return { pass: true, message: () => \"\" };\n-}\n+// function assertContainsErrorsMessages(\n+//   expected: FieldsErrors,\n+//   received: FieldsErrors\n+// ) {\n+//   const isMatch = expect.objectContaining(received).asymmetricMatch(expected);\n+\n+//   return isMatch\n+//     ? isValid()\n+//     : {\n+//         pass: false,\n+//         message: () =>\n+//           `The validation errors not contains ${JSON.stringify(\n+//             received\n+//           )}. Current: ${JSON.stringify(expected)}`,\n+//       };\n+// }\n+\n+// function isValid() {\n+//   return { pass: true, message: () => \"\" };\n+// }\n"
                }
            ],
            "date": 1694447882602,
            "name": "Commit-0",
            "content": "import ClassValidatorFields from \"../../domain/validators/class-validator-fields\";\nimport { FieldsErrors } from \"../../domain/validators/validator-fields-interface\";\nimport { EntityValidationError } from \"../../domain/validators/valitation.error\";\n\ntype Expected = | {\n  validator: ClassValidatorFields<any>\n  data: any\n} | (() => any)\n\nexpect.extend({\n  containsErrorMessages(expected: Expected, received: FieldsErrors) {\n    if (typeof expected === \"function\") {\n      try {\n        expected()\n        return isValid()\n      } catch (e) {\n        const error = e as EntityValidationError\n        return assertContainsErrorMessages(error.error, received)\n      }\n    } else {\n      const { validator, data } = expected\n      const validated = validator.validate(data)\n\n      if (validated) {\n        return isValid()\n      }\n\n      return assertContainsErrorMessages(validator.errors, received)\n    }\n  }\n})\n\nfunction assertContainsErrorMessages(\n  expected: FieldsErrors,\n  received: FieldsErrors\n) {\n  const isMatch = expect.objectContaining(received).asymmetricMatch(expected)\n  return isMatch ? isValid() : {\n    pass: false,\n    message: () => `The validation errors not contains ${JSON.stringify(\n      received\n    )}. Current: ${JSON.stringify(expected)}`\n  }\n}\n\nfunction isValid() {\n  return { pass: false, message: () => \"\" }\n}\n"
        }
    ]
}