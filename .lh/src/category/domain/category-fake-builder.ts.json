{
    "sourceFile": "src/category/domain/category-fake-builder.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1694724715713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1694724715713,
            "name": "Commit-0",
            "content": "import { Category, CategoryId } from \"./category\";\nimport { Chance } from \"chance\";\n\ntype PropOrFactory<T> = T | ((index: number) => T);\n\nexport class CategoryFakeBuilder<TBuild = any> {\n  // auto generated in entity\n  private _entity_id = undefined;\n  private _name: PropOrFactory<string> = (_index) => this.chance.word();\n  private _description: PropOrFactory<string | null> = (_index) =>\n    this.chance.paragraph();\n  private _is_active: PropOrFactory<boolean> = (_index) => true;\n  // auto generated in entity\n  private _created_at = undefined;\n\n  private countObjs;\n\n  static aCategory() {\n    return new CategoryFakeBuilder<Category>();\n  }\n\n  static theCategories(countObjs: number) {\n    return new CategoryFakeBuilder<Category[]>(countObjs);\n  }\n\n  private chance: Chance.Chance;\n\n  private constructor(countObjs: number = 1) {\n    this.countObjs = countObjs;\n    this.chance = Chance();\n  }\n\n  withEntityId(valueOrFactory: PropOrFactory<CategoryId>) {\n    this._entity_id = valueOrFactory;\n    return this;\n  }\n\n  withName(valueOrFactory: PropOrFactory<string>) {\n    this._name = valueOrFactory;\n    return this;\n  }\n\n  withInvalidNameEmpty(value: \"\" | null | undefined) {\n    this._name = value;\n    return this;\n  }\n\n  withInvalidNameNotAString(value?: any) {\n    this._name = value ?? 5;\n    return this;\n  }\n\n  withInvalidNameTooLong(value?: string) {\n    this._name = value ?? this.chance.word({ length: 256 });\n    return this;\n  }\n\n  withDescription(valueOrFactory: PropOrFactory<string | null>) {\n    this._description = valueOrFactory;\n    return this;\n  }\n\n  withInvalidDescriptionNotAString(value?: any) {\n    this._description = value ?? 5;\n    return this;\n  }\n\n  activate() {\n    this._is_active = true;\n    return this;\n  }\n\n  deactivate() {\n    this._is_active = false;\n    return this;\n  }\n\n  withInvalidIsActiveEmpty(value: \"\" | null | undefined) {\n    this._is_active = value as any;\n    return this;\n  }\n\n  withInvalidIsActiveNotABoolean(value?: any) {\n    this._is_active = value ?? \"fake boolean\";\n    return this;\n  }\n\n  withCreatedAt(valueOrFactory: PropOrFactory<Date>) {\n    this._created_at = valueOrFactory;\n    return this;\n  }\n\n  build(): TBuild {\n    const categories = new Array(this.countObjs).fill(undefined).map(\n      (_, index) =>\n        new Category(\n          {\n            name: this.callFactory(this._name, index),\n            description: this.callFactory(this._description, index),\n            is_active: this.callFactory(this._is_active, index),\n            ...(this._created_at && {\n              created_at: this.callFactory(this._created_at, index),\n            }),\n          },\n          !this._entity_id\n            ? undefined\n            : this.callFactory(this._entity_id, index)\n        )\n    );\n    return this.countObjs === 1 ? (categories[0] as any) : categories;\n  }\n\n  get entity_id() {\n    return this.getValue(\"entity_id\");\n  }\n\n  get name() {\n    return this.getValue(\"name\");\n  }\n\n  get description() {\n    return this.getValue(\"description\");\n  }\n\n  get is_active() {\n    return this.getValue(\"is_active\");\n  }\n\n  get created_at() {\n    return this.getValue(\"created_at\");\n  }\n\n  private getValue(prop) {\n    const optional = [\"entity_id\", \"created_at\"];\n    const privateProp = `_${prop}`;\n    if (!this[privateProp] && optional.includes(prop)) {\n      throw new Error(\n        `Property ${prop} not have a factory, use 'with' methods`\n      );\n    }\n    return this.callFactory(this[privateProp], 0);\n  }\n\n  private callFactory(factoryOrValue: PropOrFactory<any>, index: number) {\n    return typeof factoryOrValue === \"function\"\n      ? factoryOrValue(index)\n      : factoryOrValue;\n  }\n}\n"
        }
    ]
}