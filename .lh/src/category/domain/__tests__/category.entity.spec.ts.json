{
    "sourceFile": "src/category/domain/__tests__/category.entity.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1694299856714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1694299884678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         is_active: false,\n         created_at\n       })\n \n-      expect(category.category_id).toBeUndefined()\n+      expect(category.category_id).toBeInstanceOf(Uuid)\n       expect(category.name).toBe('Movie')\n       expect(category.description).toBe('Movie description')\n       expect(category.is_active).toBeFalsy()\n       expect(category.created_at).toBe(created_at)\n"
                },
                {
                    "date": 1694299889989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n         is_active: false,\n         created_at\n       })\n \n-      expect(category.category_id).toBeUndefined()\n+      expect(category.category_id).toBeInstanceOf(Uuid)\n       expect(category.name).toBe('Movie')\n       expect(category.description).toBe('Movie description')\n       expect(category.is_active).toBeFalsy()\n       expect(category.created_at).toBe(created_at)\n"
                },
                {
                    "date": 1694300433548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,14 +51,19 @@\n         name: \"Movie\",\n         description: \"Movie description\",\n       })\n \n-      expect(category.category_id).toBeUndefined()\n+      expect(category.category_id).toBeInstanceOf(Uuid)\n       expect(category.name).toBe('Movie')\n       expect(category.description).toBe('Movie description')\n       expect(category.is_active).toBeTruthy()\n       expect(category.created_at).toBeInstanceOf(Date)\n     })\n+\n+    describe('category_id field', () => {\n+      const arrange = [{ id: null }, { id: undefined }, { id: new Uuid() }]\n+    })\n+\n     test(\"should change name\", () => {\n       const category = new Category({\n         name: \"Movie\"\n       })\n"
                },
                {
                    "date": 1694300925052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,15 @@\n     })\n \n     describe('category_id field', () => {\n       const arrange = [{ id: null }, { id: undefined }, { id: new Uuid() }]\n+\n+      test.each(arrange)(\"id = %j\", ({ category_id }) => {\n+        const category = new Category({\n+          name: \"Movie\",\n+          category_id: category_id as any\n+        })\n+      })\n     })\n \n     test(\"should change name\", () => {\n       const category = new Category({\n"
                },
                {
                    "date": 1694300965469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,9 @@\n         const category = new Category({\n           name: \"Movie\",\n           category_id: category_id as any\n         })\n+        expect(category.category_id).toBeInstanceOf(Uuid)\n       })\n     })\n \n     test(\"should change name\", () => {\n"
                },
                {
                    "date": 1694301372883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n       expect(category.created_at).toBeInstanceOf(Date)\n     })\n \n     describe('category_id field', () => {\n-      const arrange = [{ id: null }, { id: undefined }, { id: new Uuid() }]\n+      const arrange = [{ category_id: null }, { category_id: undefined }, { category_id: new Uuid() }]\n \n       test.each(arrange)(\"id = %j\", ({ category_id }) => {\n         const category = new Category({\n           name: \"Movie\",\n"
                },
                {
                    "date": 1694395783020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,29 @@\n import { Uuid } from '../../../shared/domain/value-objects/uuid'\n import { Category } from '../category.entity'\n \n describe('Category Unit Tests', () => {\n+  let validateSpy: any\n+  beforeEach(() => {\n+    validateSpy = jest.spyOn(Category, \"validate\")\n+  })\n   describe('constructor', () => {\n-    test('should create a category with default values', () => {\n-      const category = new Category({\n+\n+    test('should create a category', () => {\n+      const category = Category.create({\n         name: 'Movie'\n       })\n       expect(category.category_id).toBeInstanceOf(Uuid)\n       expect(category.name).toBe('Movie')\n       expect(category.description).toBeNull()\n       expect(category.is_active).toBeTruthy()\n       expect(category.created_at).toBeInstanceOf(Date)\n+      expect(validateSpy).toHaveBeenCalledTimes(1)\n     })\n \n     test('should create a category with all values', () => {\n       const created_at = new Date()\n-      const category = new Category({\n+      const category = Category.create({\n         name: \"Movie\",\n         description: \"Movie description\",\n         is_active: false,\n         created_at\n@@ -27,13 +33,14 @@\n       expect(category.name).toBe('Movie')\n       expect(category.description).toBe('Movie description')\n       expect(category.is_active).toBeFalsy()\n       expect(category.created_at).toBe(created_at)\n+      expect(validateSpy).toHaveBeenCalledTimes(1)\n     })\n \n     test('should create a category with all values', () => {\n       const created_at = new Date()\n-      const category = new Category({\n+      const category = Category.create({\n         name: \"Movie\",\n         description: \"Movie description\",\n         is_active: false,\n         created_at\n@@ -43,12 +50,14 @@\n       expect(category.name).toBe('Movie')\n       expect(category.description).toBe('Movie description')\n       expect(category.is_active).toBeFalsy()\n       expect(category.created_at).toBe(created_at)\n+\n+      expect(validateSpy).toHaveBeenCalledTimes(1)\n     })\n \n     test('should create a category with name and description', () => {\n-      const category = new Category({\n+      const category = Category.create({\n         name: \"Movie\",\n         description: \"Movie description\",\n       })\n \n@@ -56,8 +65,10 @@\n       expect(category.name).toBe('Movie')\n       expect(category.description).toBe('Movie description')\n       expect(category.is_active).toBeTruthy()\n       expect(category.created_at).toBeInstanceOf(Date)\n+\n+      expect(validateSpy).toHaveBeenCalledTimes(1)\n     })\n \n     describe('category_id field', () => {\n       const arrange = [{ category_id: null }, { category_id: undefined }, { category_id: new Uuid() }]\n@@ -71,20 +82,22 @@\n       })\n     })\n \n     test(\"should change name\", () => {\n-      const category = new Category({\n+      const category = Category.create({\n         name: \"Movie\"\n       })\n       category.changeName(\"other name\")\n       expect(category.name).toBe(\"other name\")\n+      expect(validateSpy).toHaveBeenCalledTimes(2)\n     })\n     test(\"should change description\", () => {\n-      const category = new Category({\n+      const category = Category.create({\n         name: \"Movie\"\n       })\n       category.changeDescription(\"some description\")\n       expect(category.description).toBe(\"some description\")\n+      expect(validateSpy).toHaveBeenCalledTimes(2)\n     })\n \n     test(\"should activate a category\", () => {\n       const category = Category.create({\n@@ -92,8 +105,9 @@\n         is_active: false\n       })\n       category.activate()\n       expect(category.is_active).toBe(true)\n+      expect(validateSpy).toHaveBeenCalledTimes(1)\n     })\n \n     test(\"should disable a category\", () => {\n       const category = Category.create({\n@@ -101,7 +115,19 @@\n         is_active: false\n       })\n       category.deactivate()\n       expect(category.is_active).toBe(false)\n+      expect(validateSpy).toHaveBeenCalledTimes(1)\n     })\n   })\n+})\n+\n+describe(\"Category Validator\", () => {\n+  describe(\"create command\", () => {\n+    try {\n+      Category.create({\n+        name: ''\n+      })\n+    }\n+    \n+  })\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694395808533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,9 @@\n     try {\n       Category.create({\n         name: ''\n       })\n+    } catch (e) => {\n+\n     }\n-    \n   })\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694395849511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n     try {\n       Category.create({\n         name: ''\n       })\n-    } catch (e) => {\n-\n+    } catch (e) {\n+      console.error(e)\n     }\n   })\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694441811070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import { EntityValidationError } from '../../../shared/domain/validators/valitation.error'\n import { Uuid } from '../../../shared/domain/value-objects/uuid'\n import { Category } from '../category.entity'\n \n describe('Category Unit Tests', () => {\n@@ -122,13 +123,16 @@\n })\n \n describe(\"Category Validator\", () => {\n   describe(\"create command\", () => {\n-    try {\n-      Category.create({\n-        name: ''\n+    test('should an invalid category name property', () => {\n+      expect(() => Category.create({ name: null })).containsErrorMessage({\n+        name: [\n+          \"name should not be empty\",\n+          \"name must be a string\",\n+          \"name must be shorter than or equal to 255 characters\"\n+        ]\n       })\n-    } catch (e) {\n-      console.error(e)\n-    }\n+    })\n+\n   })\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694447574800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n \n describe(\"Category Validator\", () => {\n   describe(\"create command\", () => {\n     test('should an invalid category name property', () => {\n-      expect(() => Category.create({ name: null })).containsErrorMessage({\n+      expect(() => Category.create({ name: null })).containsErrorMessages({\n         name: [\n           \"name should not be empty\",\n           \"name must be a string\",\n           \"name must be shorter than or equal to 255 characters\"\n"
                }
            ],
            "date": 1694299856714,
            "name": "Commit-0",
            "content": "import { Uuid } from '../../../shared/domain/value-objects/uuid'\nimport { Category } from '../category.entity'\n\ndescribe('Category Unit Tests', () => {\n  describe('constructor', () => {\n    test('should create a category with default values', () => {\n      const category = new Category({\n        name: 'Movie'\n      })\n      expect(category.category_id).toBeInstanceOf(Uuid)\n      expect(category.name).toBe('Movie')\n      expect(category.description).toBeNull()\n      expect(category.is_active).toBeTruthy()\n      expect(category.created_at).toBeInstanceOf(Date)\n    })\n\n    test('should create a category with all values', () => {\n      const created_at = new Date()\n      const category = new Category({\n        name: \"Movie\",\n        description: \"Movie description\",\n        is_active: false,\n        created_at\n      })\n\n      expect(category.category_id).toBeUndefined()\n      expect(category.name).toBe('Movie')\n      expect(category.description).toBe('Movie description')\n      expect(category.is_active).toBeFalsy()\n      expect(category.created_at).toBe(created_at)\n    })\n\n    test('should create a category with all values', () => {\n      const created_at = new Date()\n      const category = new Category({\n        name: \"Movie\",\n        description: \"Movie description\",\n        is_active: false,\n        created_at\n      })\n\n      expect(category.category_id).toBeUndefined()\n      expect(category.name).toBe('Movie')\n      expect(category.description).toBe('Movie description')\n      expect(category.is_active).toBeFalsy()\n      expect(category.created_at).toBe(created_at)\n    })\n\n    test('should create a category with name and description', () => {\n      const category = new Category({\n        name: \"Movie\",\n        description: \"Movie description\",\n      })\n\n      expect(category.category_id).toBeUndefined()\n      expect(category.name).toBe('Movie')\n      expect(category.description).toBe('Movie description')\n      expect(category.is_active).toBeTruthy()\n      expect(category.created_at).toBeInstanceOf(Date)\n    })\n    test(\"should change name\", () => {\n      const category = new Category({\n        name: \"Movie\"\n      })\n      category.changeName(\"other name\")\n      expect(category.name).toBe(\"other name\")\n    })\n    test(\"should change description\", () => {\n      const category = new Category({\n        name: \"Movie\"\n      })\n      category.changeDescription(\"some description\")\n      expect(category.description).toBe(\"some description\")\n    })\n\n    test(\"should activate a category\", () => {\n      const category = Category.create({\n        name: \"Filmes\",\n        is_active: false\n      })\n      category.activate()\n      expect(category.is_active).toBe(true)\n    })\n\n    test(\"should disable a category\", () => {\n      const category = Category.create({\n        name: \"Filmes\",\n        is_active: false\n      })\n      category.deactivate()\n      expect(category.is_active).toBe(false)\n    })\n  })\n})"
        }
    ]
}