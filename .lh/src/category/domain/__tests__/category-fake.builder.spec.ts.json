{
    "sourceFile": "src/category/domain/__tests__/category-fake.builder.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1694728785642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1694728846276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,11 @@\n     const faker = CategoryFakeBuilder.aCategory()\n \n     test('should throw error when any with methods has called', () => {\n       expect(() => faker.category_id).toThrowError(\n-        new Error(\"Property category_id have a \")\n-      )\n-    })\n+        new Error(\n+          \"Property category_id not have a factory, use 'with' methods\",\n+        ),\n+      );\n+    });\n   })\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694728860825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,8 @@\n       expect(() => faker.category_id).toThrowError(\n         new Error(\n           \"Property category_id not have a factory, use 'with' methods\",\n         ),\n-      );\n-    });\n+      )\n+    })\n   })\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694729066379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,6 +10,10 @@\n           \"Property category_id not have a factory, use 'with' methods\",\n         ),\n       )\n     })\n+\n+    test('should be undefined', () => {\n+      expect(faker['_category_id']).toBeUndefined()\n+    })\n   })\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694729805425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import { Uuid } from \"../../../shared/domain/value-objects/uuid.vo\"\n import { CategoryFakeBuilder } from \"../category-fake.builder\"\n \n describe('CategoryFakeBuilder Unit Tests', () => {\n   describe('category_id prop', () => {\n@@ -14,6 +15,17 @@\n \n     test('should be undefined', () => {\n       expect(faker['_category_id']).toBeUndefined()\n     })\n+\n+    test('withUuid', () => {\n+      const category_id = new Uuid()\n+      const $this = faker.withUuid(category_id)\n+      expect($this).toBeInstanceOf(CategoryFakeBuilder)\n+      expect(faker['_category_id']).toBe(category_id)\n+\n+      faker.withUuid(() => category_id)\n+\n+      expect(faker['_category_id']()).toBe(category_id)\n+    })\n   })\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694729829389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,7 +25,9 @@\n \n       faker.withUuid(() => category_id)\n \n       expect(faker['_category_id']()).toBe(category_id)\n+\n+      expect(faker.category_id).toBe(category_id)\n     })\n   })\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694729860390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n       expect($this).toBeInstanceOf(CategoryFakeBuilder)\n       expect(faker['_category_id']).toBe(category_id)\n \n       faker.withUuid(() => category_id)\n-\n+      //@ts-expect-error _category_id is a callable\n       expect(faker['_category_id']()).toBe(category_id)\n \n       expect(faker.category_id).toBe(category_id)\n     })\n"
                },
                {
                    "date": 1694732214499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,6 +28,13 @@\n       expect(faker['_category_id']()).toBe(category_id)\n \n       expect(faker.category_id).toBe(category_id)\n     })\n+\n+    test('should pass index to category_id factory', () => {\n+      let mockFactory = jest.fn(() => new Uuid())\n+      faker.withUuid(mockFactory)\n+      faker.build()\n+      expect(mockFactory).toHaveBeenCalledTimes(1)\n+    })\n   })\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694732361258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,7 +34,13 @@\n       let mockFactory = jest.fn(() => new Uuid())\n       faker.withUuid(mockFactory)\n       faker.build()\n       expect(mockFactory).toHaveBeenCalledTimes(1)\n+\n+      const categoryId = new Uuid()\n+      mockFactory = jest.fn(() => categoryId)\n+      const fakerMany = CategoryFakeBuilder.theCategories(2)\n+      fakerMany.withUuid(mockFactory)\n+      fakerMany.build()\n     })\n   })\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694732686835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,7 +40,11 @@\n       mockFactory = jest.fn(() => categoryId)\n       const fakerMany = CategoryFakeBuilder.theCategories(2)\n       fakerMany.withUuid(mockFactory)\n       fakerMany.build()\n+\n+      expect(mockFactory).toHaveBeenCalledTimes(2)\n+      expect(fakerMany.build()[0].category_id).toBe(categoryId)\n+      expect(fakerMany.build()[1].category_id).toBe(categoryId)\n     })\n   })\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694733624998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,50 +1,263 @@\n import { Uuid } from \"../../../shared/domain/value-objects/uuid.vo\"\n import { CategoryFakeBuilder } from \"../category-fake.builder\"\n \n-describe('CategoryFakeBuilder Unit Tests', () => {\n+describe('CategoryFakerBuilder Unit Tests', () => {\n   describe('category_id prop', () => {\n-    const faker = CategoryFakeBuilder.aCategory()\n+    const faker = CategoryFakeBuilder.aCategory();\n \n     test('should throw error when any with methods has called', () => {\n       expect(() => faker.category_id).toThrowError(\n         new Error(\n           \"Property category_id not have a factory, use 'with' methods\",\n         ),\n-      )\n-    })\n+      );\n+    });\n \n     test('should be undefined', () => {\n-      expect(faker['_category_id']).toBeUndefined()\n-    })\n+      expect(faker['_category_id']).toBeUndefined();\n+    });\n \n     test('withUuid', () => {\n-      const category_id = new Uuid()\n-      const $this = faker.withUuid(category_id)\n-      expect($this).toBeInstanceOf(CategoryFakeBuilder)\n-      expect(faker['_category_id']).toBe(category_id)\n+      const category_id = new Uuid();\n+      const $this = faker.withUuid(category_id);\n+      expect($this).toBeInstanceOf(CategoryFakeBuilder);\n+      expect(faker['_category_id']).toBe(category_id);\n \n-      faker.withUuid(() => category_id)\n+      faker.withUuid(() => category_id);\n       //@ts-expect-error _category_id is a callable\n-      expect(faker['_category_id']()).toBe(category_id)\n+      expect(faker['_category_id']()).toBe(category_id);\n \n-      expect(faker.category_id).toBe(category_id)\n-    })\n+      expect(faker.category_id).toBe(category_id);\n+    });\n \n+    //TODO - melhorar este nome\n     test('should pass index to category_id factory', () => {\n-      let mockFactory = jest.fn(() => new Uuid())\n-      faker.withUuid(mockFactory)\n\\ No newline at end of file\n-      faker.build()\n-      expect(mockFactory).toHaveBeenCalledTimes(1)\n+      let mockFactory = jest.fn(() => new Uuid());\n+      faker.withUuid(mockFactory);\n+      faker.build();\n+      expect(mockFactory).toHaveBeenCalledTimes(1);\n \n-      const categoryId = new Uuid()\n-      mockFactory = jest.fn(() => categoryId)\n-      const fakerMany = CategoryFakeBuilder.theCategories(2)\n-      fakerMany.withUuid(mockFactory)\n-      fakerMany.build()\n+      const categoryId = new Uuid();\n+      mockFactory = jest.fn(() => categoryId);\n+      const fakerMany = CategoryFakeBuilder.theCategories(2);\n+      fakerMany.withUuid(mockFactory);\n+      fakerMany.build();\n \n-      expect(mockFactory).toHaveBeenCalledTimes(2)\n-      expect(fakerMany.build()[0].category_id).toBe(categoryId)\n-      expect(fakerMany.build()[1].category_id).toBe(categoryId)\n-    })\n-  })\n-})\n+      expect(mockFactory).toHaveBeenCalledTimes(2);\n+      expect(fakerMany.build()[0].category_id).toBe(categoryId);\n+      expect(fakerMany.build()[1].category_id).toBe(categoryId);\n+    });\n+  });\n+\n+  describe('name prop', () => {\n+    const faker = CategoryFakeBuilder.aCategory();\n+    test('should be a function', () => {\n+      expect(typeof faker['_name']).toBe('function');\n+    });\n+\n+    test('should call the word method', () => {\n+      const chance = Chance();\n+      const spyWordMethod = jest.spyOn(chance, 'word');\n+      faker['chance'] = chance;\n+      faker.build();\n+\n+      expect(spyWordMethod).toHaveBeenCalled();\n+    });\n+\n+    test('withName', () => {\n+      const $this = faker.withName('test name');\n+      expect($this).toBeInstanceOf(CategoryFakeBuilder);\n+      expect(faker['_name']).toBe('test name');\n+\n+      faker.withName(() => 'test name');\n+      //@ts-expect-error name is callable\n+      expect(faker['_name']()).toBe('test name');\n+\n+      expect(faker.name).toBe('test name');\n+    });\n+\n+    test('should pass index to name factory', () => {\n+      faker.withName((index) => `test name ${index}`);\n+      const category = faker.build();\n+      expect(category.name).toBe(`test name 0`);\n+\n+      const fakerMany = CategoryFakeBuilder.theCategories(2);\n+      fakerMany.withName((index) => `test name ${index}`);\n+      const categories = fakerMany.build();\n+\n+      expect(categories[0].name).toBe(`test name 0`);\n+      expect(categories[1].name).toBe(`test name 1`);\n+    });\n+\n+    test('invalid too long case', () => {\n+      const $this = faker.withInvalidNameTooLong();\n+      expect($this).toBeInstanceOf(CategoryFakeBuilder);\n+      expect(faker['_name'].length).toBe(256);\n+\n+      const tooLong = 'a'.repeat(256);\n+      faker.withInvalidNameTooLong(tooLong);\n+      expect(faker['_name'].length).toBe(256);\n+      expect(faker['_name']).toBe(tooLong);\n+    });\n+  });\n+\n+  describe('description prop', () => {\n+    const faker = CategoryFakeBuilder.aCategory();\n+    test('should be a function', () => {\n+      expect(typeof faker['_description']).toBe('function');\n+    });\n+\n+    test('should call the paragraph method', () => {\n+      const chance = Chance();\n+      const spyParagraphMethod = jest.spyOn(chance, 'paragraph');\n+      faker['chance'] = chance;\n+      faker.build();\n+      expect(spyParagraphMethod).toHaveBeenCalled();\n+    });\n+\n+    test('withDescription', () => {\n+      const $this = faker.withDescription('test description');\n+      expect($this).toBeInstanceOf(CategoryFakeBuilder);\n+      expect(faker['_description']).toBe('test description');\n+\n+      faker.withDescription(() => 'test description');\n+      //@ts-expect-error description is callable\n+      expect(faker['_description']()).toBe('test description');\n+\n+      expect(faker.description).toBe('test description');\n+    });\n+\n+    test('should pass index to description factory', () => {\n+      faker.withDescription((index) => `test description ${index}`);\n+      const category = faker.build();\n+      expect(category.description).toBe(`test description 0`);\n+\n+      const fakerMany = CategoryFakeBuilder.theCategories(2);\n+      fakerMany.withDescription((index) => `test description ${index}`);\n+      const categories = fakerMany.build();\n+\n+      expect(categories[0].description).toBe(`test description 0`);\n+      expect(categories[1].description).toBe(`test description 1`);\n+    });\n+  });\n+\n+  describe('is_active prop', () => {\n+    const faker = CategoryFakeBuilder.aCategory();\n+    test('should be a function', () => {\n+      expect(typeof faker['_is_active']).toBe('function');\n+    });\n+\n+    test('activate', () => {\n+      const $this = faker.activate();\n+      expect($this).toBeInstanceOf(CategoryFakeBuilder);\n+      expect(faker['_is_active']).toBe(true);\n+      expect(faker.is_active).toBe(true);\n+    });\n+\n+    test('deactivate', () => {\n+      const $this = faker.deactivate();\n+      expect($this).toBeInstanceOf(CategoryFakeBuilder);\n+      expect(faker['_is_active']).toBe(false);\n+      expect(faker.is_active).toBe(false);\n+    });\n+  });\n+\n+  describe('created_at prop', () => {\n+    const faker = CategoryFakeBuilder.aCategory();\n+\n+    test('should throw error when any with methods has called', () => {\n+      const fakerCategory = CategoryFakeBuilder.aCategory();\n+      expect(() => fakerCategory.created_at).toThrowError(\n+        new Error(\"Property created_at not have a factory, use 'with' methods\"),\n+      );\n+    });\n+\n+    test('should be undefined', () => {\n+      expect(faker['_created_at']).toBeUndefined();\n+    });\n+\n+    test('withCreatedAt', () => {\n+      const date = new Date();\n+      const $this = faker.withCreatedAt(date);\n+      expect($this).toBeInstanceOf(CategoryFakeBuilder);\n+      expect(faker['_created_at']).toBe(date);\n+\n+      faker.withCreatedAt(() => date);\n+      //@ts-expect-error _created_at is a callable\n+      expect(faker['_created_at']()).toBe(date);\n+      expect(faker.created_at).toBe(date);\n+    });\n+\n+    test('should pass index to created_at factory', () => {\n+      const date = new Date();\n+      faker.withCreatedAt((index) => new Date(date.getTime() + index + 2));\n+      const category = faker.build();\n+      expect(category.created_at.getTime()).toBe(date.getTime() + 2);\n+\n+      const fakerMany = CategoryFakeBuilder.theCategories(2);\n+      fakerMany.withCreatedAt((index) => new Date(date.getTime() + index + 2));\n+      const categories = fakerMany.build();\n+\n+      expect(categories[0].created_at.getTime()).toBe(date.getTime() + 2);\n+      expect(categories[1].created_at.getTime()).toBe(date.getTime() + 3);\n+    });\n+  });\n+\n+  test('should create a category', () => {\n+    const faker = CategoryFakeBuilder.aCategory();\n+    let category = faker.build();\n+\n+    expect(category.category_id).toBeInstanceOf(Uuid);\n+    expect(typeof category.name === 'string').toBeTruthy();\n+    expect(typeof category.description === 'string').toBeTruthy();\n+    expect(category.is_active).toBe(true);\n+    expect(category.created_at).toBeInstanceOf(Date);\n+\n+    const created_at = new Date();\n+    const category_id = new Uuid();\n+    category = faker\n+      .withUuid(category_id)\n+      .withName('name test')\n+      .withDescription('description test')\n+      .deactivate()\n+      .withCreatedAt(created_at)\n+      .build();\n+\n+    expect(category.category_id.id).toBe(category_id.id);\n+    expect(category.name).toBe('name test');\n+    expect(category.description).toBe('description test');\n+    expect(category.is_active).toBe(false);\n+    expect(category.created_at).toBe(created_at);\n+  });\n+\n+  test('should create many categories', () => {\n+    const faker = CategoryFakeBuilder.theCategories(2);\n+    let categories = faker.build();\n+\n+    categories.forEach((category) => {\n+      expect(category.category_id).toBeInstanceOf(Uuid);\n+      expect(typeof category.name === 'string').toBeTruthy();\n+      expect(typeof category.description === 'string').toBeTruthy();\n+      expect(category.is_active).toBe(true);\n+      expect(category.created_at).toBeInstanceOf(Date);\n+    });\n+\n+    const created_at = new Date();\n+    const category_id = new Uuid();\n+    categories = faker\n+      .withUuid(category_id)\n+      .withName('name test')\n+      .withDescription('description test')\n+      .deactivate()\n+      .withCreatedAt(created_at)\n+      .build();\n+\n+    categories.forEach((category) => {\n+      expect(category.category_id.id).toBe(category_id.id);\n+      expect(category.name).toBe('name test');\n+      expect(category.description).toBe('description test');\n+      expect(category.is_active).toBe(false);\n+      expect(category.created_at).toBe(created_at);\n+    });\n+  });\n+});\n"
                },
                {
                    "date": 1694733650128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import { Chance } from 'chance';\n import { Uuid } from \"../../../shared/domain/value-objects/uuid.vo\"\n import { CategoryFakeBuilder } from \"../category-fake.builder\"\n \n describe('CategoryFakerBuilder Unit Tests', () => {\n"
                }
            ],
            "date": 1694728785642,
            "name": "Commit-0",
            "content": "import { CategoryFakeBuilder } from \"../category-fake.builder\"\n\ndescribe('CategoryFakeBuilder Unit Tests', () => {\n  describe('category_id prop', () => {\n    const faker = CategoryFakeBuilder.aCategory()\n\n    test('should throw error when any with methods has called', () => {\n      expect(() => faker.category_id).toThrowError(\n        new Error(\"Property category_id have a \")\n      )\n    })\n  })\n})"
        }
    ]
}