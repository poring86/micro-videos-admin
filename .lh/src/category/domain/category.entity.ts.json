{
    "sourceFile": "src/category/domain/category.entity.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 29,
            "patches": [
                {
                    "date": 1694299548942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1694299587745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   is_active: boolean\n   created_at: Date\n \n   constructor(props: CategoryConstructorProps) {\n-    this.category_id = props.category_id\n+    this.category_id = props.category_id ?? new Uuid()\n     this.name = props.name\n     this.description = props.description ?? null\n     this.is_active = props.is_active ?? true\n     this.created_at = props.created_at ?? new Date()\n"
                },
                {
                    "date": 1694299722187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n   }\n \n   toJSON() {\n     return {\n-      category_id: this.category_id,\n+      category_id: this.category_id.id,\n       name: this.name,\n       description: this.description,\n       is_active: this.is_active,\n       created_at: this.created_at\n"
                },
                {
                    "date": 1694309018402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n     return new Category(props)\n   }\n \n   changeName(name: string): void {\n+    ValidatorRules.values(name, 'name').required().string().maxLength(255)\n     this.name = name\n   }\n \n   changeDescription(description: string): void {\n"
                },
                {
                    "date": 1694346326075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n+import { ValidatorRules } from \"../../shared/domain/validators/validator-rules\";\n import { Uuid } from \"../../shared/domain/value-objects/uuid\";\n \n+\n export type CategoryConstructorProps = {\n   category_id?: Uuid\n   name: string;\n   description?: string | null\n@@ -36,8 +38,9 @@\n   }\n \n   changeName(name: string): void {\n     ValidatorRules.values(name, 'name').required().string().maxLength(255)\n+\n     this.name = name\n   }\n \n   changeDescription(description: string): void {\n"
                },
                {
                    "date": 1694347620542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { ValidatorRules } from \"../../shared/domain/validators/validator-rules\";\n+import { ValidatorRules } from \"./validator-rules\";\n import { Uuid } from \"../../shared/domain/value-objects/uuid\";\n \n \n export type CategoryConstructorProps = {\n"
                },
                {
                    "date": 1694347634788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { ValidatorRules } from \"./validator-rules\";\n+import { ValidatorRules } from \"../../shared/domain/validators/validator-rules\";\n import { Uuid } from \"../../shared/domain/value-objects/uuid\";\n \n \n export type CategoryConstructorProps = {\n"
                },
                {
                    "date": 1694347645450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { ValidatorRules } from \"../../shared/domain/validators/validator-rules\";\n+import ValidatorRules from \"../../shared/domain/validators/validator-rules\";\n import { Uuid } from \"../../shared/domain/value-objects/uuid\";\n \n \n export type CategoryConstructorProps = {\n"
                },
                {
                    "date": 1694361028233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n+import validator from \"validator\";\n import ValidatorRules from \"../../shared/domain/validators/validator-rules\";\n import { Uuid } from \"../../shared/domain/value-objects/uuid\";\n+import { CategoryValidatorFactory } from \"./category.validator\";\n \n \n export type CategoryConstructorProps = {\n   category_id?: Uuid\n@@ -54,8 +56,13 @@\n   deactivate() {\n     this.is_active = false\n   }\n \n+  static validate(entity: Category) {\n+    const validate = CategoryValidatorFactory.create()\n+    return validator.validate(entity)\n+  }\n+\n   toJSON() {\n     return {\n       category_id: this.category_id.id,\n       name: this.name,\n"
                },
                {
                    "date": 1694361035752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n     this.is_active = false\n   }\n \n   static validate(entity: Category) {\n-    const validate = CategoryValidatorFactory.create()\n+    const validator = CategoryValidatorFactory.create()\n     return validator.validate(entity)\n   }\n \n   toJSON() {\n"
                },
                {
                    "date": 1694361344018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-import validator from \"validator\";\n import ValidatorRules from \"../../shared/domain/validators/validator-rules\";\n import { Uuid } from \"../../shared/domain/value-objects/uuid\";\n import { CategoryValidatorFactory } from \"./category.validator\";\n \n"
                },
                {
                    "date": 1694361405298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,11 @@\n     this.created_at = props.created_at ?? new Date()\n   }\n \n   static create(props: CategoryConstructorProps): Category {\n-    return new Category(props)\n+    const cateogory = new Category(props)\n+    Category.validate(category)\n+    return cateogory\n   }\n \n   changeName(name: string): void {\n     ValidatorRules.values(name, 'name').required().string().maxLength(255)\n"
                },
                {
                    "date": 1694361417525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,11 +34,11 @@\n     this.created_at = props.created_at ?? new Date()\n   }\n \n   static create(props: CategoryConstructorProps): Category {\n-    const cateogory = new Category(props)\n+    const category = new Category(props)\n     Category.validate(category)\n-    return cateogory\n+    return category\n   }\n \n   changeName(name: string): void {\n     ValidatorRules.values(name, 'name').required().string().maxLength(255)\n"
                },
                {
                    "date": 1694361472509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,12 +43,14 @@\n   changeName(name: string): void {\n     ValidatorRules.values(name, 'name').required().string().maxLength(255)\n \n     this.name = name\n+    Category.validate(category)\n   }\n \n   changeDescription(description: string): void {\n     this.description = description\n+    Category.validate(category)\n   }\n \n   activate() {\n     this.is_active = true\n"
                },
                {
                    "date": 1694361513332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,14 +43,14 @@\n   changeName(name: string): void {\n     ValidatorRules.values(name, 'name').required().string().maxLength(255)\n \n     this.name = name\n-    Category.validate(category)\n+    Category.validate(this)\n   }\n \n   changeDescription(description: string): void {\n     this.description = description\n-    Category.validate(category)\n+    Category.validate(this)\n   }\n \n   activate() {\n     this.is_active = true\n"
                },
                {
                    "date": 1694394971791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n-import ValidatorRules from \"../../shared/domain/validators/validator-rules\";\n+\n+import { EntityValidationError } from \"../../shared/domain/validators/valitation.error\";\n import { Uuid } from \"../../shared/domain/value-objects/uuid\";\n import { CategoryValidatorFactory } from \"./category.validator\";\n \n \n@@ -38,11 +39,9 @@\n     const category = new Category(props)\n     Category.validate(category)\n     return category\n   }\n-\n   changeName(name: string): void {\n-    ValidatorRules.values(name, 'name').required().string().maxLength(255)\n \n     this.name = name\n     Category.validate(this)\n   }\n@@ -62,8 +61,12 @@\n \n   static validate(entity: Category) {\n     const validator = CategoryValidatorFactory.create()\n     return validator.validate(entity)\n+\n+    if (!isValid) {\n+      throw new EntityValidationError(validator.errors)\n+    }\n   }\n \n   toJSON() {\n     return {\n"
                },
                {
                    "date": 1694395064109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n   }\n \n   static validate(entity: Category) {\n     const validator = CategoryValidatorFactory.create()\n-    return validator.validate(entity)\n+    const isValid = validator.validate(entity)\n \n     if (!isValid) {\n       throw new EntityValidationError(validator.errors)\n     }\n"
                },
                {
                    "date": 1694468483608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n \n import { EntityValidationError } from \"../../shared/domain/validators/valitation.error\";\n+import { ValueObject } from \"../../shared/domain/value-object\";\n import { Uuid } from \"../../shared/domain/value-objects/uuid\";\n import { CategoryValidatorFactory } from \"./category.validator\";\n \n \n@@ -20,8 +21,12 @@\n   created_at: Date\n }\n \n export class Category {\n+  get entity_id(): ValueObject {\n+    throw new Error(\"Method not implemented\")\n+  }\n+\n   category_id: Uuid\n   name: string\n   description: string | null\n   is_active: boolean\n"
                },
                {
                    "date": 1694468610877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,12 @@\n     this.is_active = props.is_active ?? true\n     this.created_at = props.created_at ?? new Date()\n   }\n \n+  get entity_id(): ValueObject {\n+    return this.category_id\n+  }\n+\n   static create(props: CategoryConstructorProps): Category {\n     const category = new Category(props)\n     Category.validate(category)\n     return category\n"
                },
                {
                    "date": 1694468657949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n \n+import { Entity } from \"../../shared/domain/entity\";\n import { EntityValidationError } from \"../../shared/domain/validators/valitation.error\";\n import { ValueObject } from \"../../shared/domain/value-object\";\n import { Uuid } from \"../../shared/domain/value-objects/uuid\";\n import { CategoryValidatorFactory } from \"./category.validator\";\n@@ -20,12 +21,9 @@\n   is_active: boolean\n   created_at: Date\n }\n \n-export class Category {\n-  get entity_id(): ValueObject {\n-    throw new Error(\"Method not implemented\")\n-  }\n+export class Category implements Entity {\n \n   category_id: Uuid\n   name: string\n   description: string | null\n"
                },
                {
                    "date": 1694468683504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n   is_active: boolean\n   created_at: Date\n \n   constructor(props: CategoryConstructorProps) {\n+    super()\n     this.category_id = props.category_id ?? new Uuid()\n     this.name = props.name\n     this.description = props.description ?? null\n     this.is_active = props.is_active ?? true\n"
                },
                {
                    "date": 1694469379720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   is_active: boolean\n   created_at: Date\n }\n \n-export class Category implements Entity {\n+export class Category extends Entity {\n \n   category_id: Uuid\n   name: string\n   description: string | null\n"
                },
                {
                    "date": 1694469618012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,15 @@\n     const category = new Category(props)\n     Category.validate(category)\n     return category\n   }\n+\n+  update(name: string, description: string) {\n+    this.name = name\n+\n+    this.description = description\n+  }\n+\n   changeName(name: string): void {\n \n     this.name = name\n     Category.validate(this)\n"
                },
                {
                    "date": 1694469840622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,10 +50,11 @@\n   }\n \n   update(name: string, description: string) {\n     this.name = name\n+    this.description = description\n \n-    this.description = description\n+    Category.validate(this)\n   }\n \n   changeName(name: string): void {\n \n"
                },
                {
                    "date": 1695213059094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n \n import { Entity } from \"../../shared/domain/entity\";\n import { EntityValidationError } from \"../../shared/domain/validators/valitation.error\";\n import { ValueObject } from \"../../shared/domain/value-object\";\n-import { Uuid } from \"../../shared/domain/value-objects/uuid\";\n+import { Uuid } from \"../../shared/domain/value-objects/uuid.vo\";\n+import { CategoryFakeBuilder } from \"./category-fake.builder\";\n import { CategoryValidatorFactory } from \"./category.validator\";\n \n \n export type CategoryConstructorProps = {\n@@ -45,8 +46,9 @@\n \n   static create(props: CategoryConstructorProps): Category {\n     const category = new Category(props)\n     Category.validate(category)\n+    Category.validate(category)\n     return category\n   }\n \n   update(name: string, description: string) {\n@@ -83,8 +85,12 @@\n       throw new EntityValidationError(validator.errors)\n     }\n   }\n \n+  static fake() {\n+    return CategoryFakeBuilder;\n+  }\n+\n   toJSON() {\n     return {\n       category_id: this.category_id.id,\n       name: this.name,\n"
                },
                {
                    "date": 1695213176655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,12 +44,12 @@\n     return this.category_id\n   }\n \n   static create(props: CategoryConstructorProps): Category {\n-    const category = new Category(props)\n-    Category.validate(category)\n-    Category.validate(category)\n-    return category\n+    const category = new Category(props);\n+    //category.validate();\n+    category.validate(['name']);\n+    return category;\n   }\n \n   update(name: string, description: string) {\n     this.name = name\n"
                },
                {
                    "date": 1695213414604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,15 +76,11 @@\n   deactivate() {\n     this.is_active = false\n   }\n \n-  static validate(entity: Category) {\n-    const validator = CategoryValidatorFactory.create()\n-    const isValid = validator.validate(entity)\n-\n-    if (!isValid) {\n-      throw new EntityValidationError(validator.errors)\n-    }\n+  validate(fields?: string[]) {\n+    const validator = CategoryValidatorFactory.create();\n+    return validator.validate(this.notification, this, fields);\n   }\n \n   static fake() {\n     return CategoryFakeBuilder;\n"
                },
                {
                    "date": 1695213527131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,24 +50,16 @@\n     category.validate(['name']);\n     return category;\n   }\n \n-  update(name: string, description: string) {\n-    this.name = name\n-    this.description = description\n-\n-    Category.validate(this)\n-  }\n-\n   changeName(name: string): void {\n \n     this.name = name\n-    Category.validate(this)\n+    this.validate(['name']);\n   }\n \n   changeDescription(description: string): void {\n     this.description = description\n-    Category.validate(this)\n   }\n \n   activate() {\n     this.is_active = true\n"
                },
                {
                    "date": 1695224813611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,51 +23,49 @@\n   created_at: Date\n }\n \n export class Category extends Entity {\n+  category_id: Uuid;\n+  name: string;\n+  description: string | null;\n+  is_active: boolean;\n+  created_at: Date;\n \n-  category_id: Uuid\n-  name: string\n-  description: string | null\n-  is_active: boolean\n-  created_at: Date\n-\n   constructor(props: CategoryConstructorProps) {\n-    super()\n-    this.category_id = props.category_id ?? new Uuid()\n-    this.name = props.name\n-    this.description = props.description ?? null\n-    this.is_active = props.is_active ?? true\n-    this.created_at = props.created_at ?? new Date()\n+    super();\n+    this.category_id = props.category_id ?? new Uuid();\n+    this.name = props.name;\n+    this.description = props.description ?? null;\n+    this.is_active = props.is_active ?? true;\n+    this.created_at = props.created_at ?? new Date();\n   }\n \n   get entity_id(): ValueObject {\n-    return this.category_id\n+    return this.category_id;\n   }\n \n-  static create(props: CategoryConstructorProps): Category {\n+  static create(props: CategoryCreateCommand): Category {\n     const category = new Category(props);\n     //category.validate();\n     category.validate(['name']);\n     return category;\n   }\n \n   changeName(name: string): void {\n-\n-    this.name = name\n+    this.name = name;\n     this.validate(['name']);\n   }\n \n   changeDescription(description: string): void {\n-    this.description = description\n+    this.description = description;\n   }\n \n   activate() {\n-    this.is_active = true\n+    this.is_active = true;\n   }\n \n   deactivate() {\n-    this.is_active = false\n+    this.is_active = false;\n   }\n \n   validate(fields?: string[]) {\n     const validator = CategoryValidatorFactory.create();\n@@ -83,8 +81,8 @@\n       category_id: this.category_id.id,\n       name: this.name,\n       description: this.description,\n       is_active: this.is_active,\n-      created_at: this.created_at\n-    }\n+      created_at: this.created_at,\n+    };\n\\ No newline at end of file\n   }\n-}\n+}\n"
                },
                {
                    "date": 1695224832411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,23 +7,22 @@\n import { CategoryValidatorFactory } from \"./category.validator\";\n \n \n export type CategoryConstructorProps = {\n-  category_id?: Uuid\n+  category_id?: Uuid;\n   name: string;\n-  description?: string | null\n-  is_active?: boolean\n-  created_at?: Date\n-}\n+  description?: string | null;\n+  is_active?: boolean;\n+  created_at?: Date;\n+};\n \n export type CategoryCreateCommand = {\n-  category_id: string\n-  name: string\n-  description: string | null\n-  is_active: boolean\n-  created_at: Date\n-}\n+  name: string;\n+  description?: string | null;\n+  is_active?: boolean;\n+};\n \n+\n export class Category extends Entity {\n   category_id: Uuid;\n   name: string;\n   description: string | null;\n@@ -84,5 +83,5 @@\n       is_active: this.is_active,\n       created_at: this.created_at,\n     };\n   }\n-}\n\\ No newline at end of file\n+}\n"
                }
            ],
            "date": 1694299548942,
            "name": "Commit-0",
            "content": "import { Uuid } from \"../../shared/domain/value-objects/uuid\";\n\nexport type CategoryConstructorProps = {\n  category_id?: Uuid\n  name: string;\n  description?: string | null\n  is_active?: boolean\n  created_at?: Date\n}\n\nexport type CategoryCreateCommand = {\n  category_id: string\n  name: string\n  description: string | null\n  is_active: boolean\n  created_at: Date\n}\n\nexport class Category {\n  category_id: Uuid\n  name: string\n  description: string | null\n  is_active: boolean\n  created_at: Date\n\n  constructor(props: CategoryConstructorProps) {\n    this.category_id = props.category_id\n    this.name = props.name\n    this.description = props.description ?? null\n    this.is_active = props.is_active ?? true\n    this.created_at = props.created_at ?? new Date()\n  }\n\n  static create(props: CategoryConstructorProps): Category {\n    return new Category(props)\n  }\n\n  changeName(name: string): void {\n    this.name = name\n  }\n\n  changeDescription(description: string): void {\n    this.description = description\n  }\n\n  activate() {\n    this.is_active = true\n  }\n\n  deactivate() {\n    this.is_active = false\n  }\n\n  toJSON() {\n    return {\n      category_id: this.category_id,\n      name: this.name,\n      description: this.description,\n      is_active: this.is_active,\n      created_at: this.created_at\n    }\n  }\n}"
        }
    ]
}