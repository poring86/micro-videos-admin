{
    "sourceFile": "src/category/application/use-cases/update-category/update-category.usecase.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1695248122193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1695248122193,
            "name": "Commit-0",
            "content": "import { IUseCase } from \"../../../../shared/application/use-case.interface\";\nimport { NotFoundError } from \"../../../../shared/domain/errors/not-found.error\";\nimport { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\nimport { Category } from \"../../../domain/category.entity\";\nimport { ICategoryRepository } from \"../../../domain/category.repository\";\nimport { CategoryOutput, CategoryOutputMapper } from \"../common/category-output\";\n\nexport class UpdateCategoryUseCase implements IUseCase<UpdateCategoryInput, UpdateCategoryOutput>{\n  constructor(private readonly categoryRepo: ICategoryRepository) { }\n  async execute(input: UpdateCategoryInput): Promise<UpdateCategoryOutput> {\n    const uuid = new Uuid(input.id)\n    const category = await this.categoryRepo.findById(uuid)\n\n    if (!category) {\n      throw new NotFoundError(input.id, Category)\n    }\n\n    input.name && category.changeName(input.name)\n    if (\"description\" in input) {\n      category.changeDescription(input.description)\n    }\n\n    if (input.is_active === true) {\n      category.activate()\n    }\n\n    if (input.is_active === false) {\n      category.deactivate()\n    }\n\n    await this.categoryRepo.update(category)\n\n    return CategoryOutputMapper.toOutput(category)\n  }\n}\n\nexport type UpdateCategoryInput = {\n  id: string\n  name?: string\n  description?: string\n  is_active?: boolean\n}\n\nexport type UpdateCategoryOutput = CategoryOutput"
        }
    ]
}