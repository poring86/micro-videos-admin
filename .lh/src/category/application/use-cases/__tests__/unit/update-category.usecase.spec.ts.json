{
    "sourceFile": "src/category/application/use-cases/__tests__/unit/update-category.usecase.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1695248123891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1695248123890,
            "name": "Commit-0",
            "content": "import { NotFoundError } from \"../../../../../shared/domain/errors/not-found.error\";\nimport { InvalidUuidError, Uuid } from \"../../../../../shared/domain/value-objects/uuid.vo\";\nimport { setupSequelize } from \"../../../../../shared/infra/testing/herpers\";\nimport { Category } from \"../../../../domain/category.entity\";\nimport { CategoryInMemoryRepository } from \"../../../../infra/db/in-memory/category-in-memory.repository\";\nimport { CategoryModel } from \"../../../../infra/db/sequelize/category.model\";\nimport { UpdateCategoryUseCase } from \"../../update-category/update-category.usecase\";\n\ndescribe('UpdateCategoryUseCase Unit Tests', () => {\n\n  let useCase: UpdateCategoryUseCase;\n  let repository: CategoryInMemoryRepository;\n\n  setupSequelize({ models: [CategoryModel] });\n\n  beforeEach(() => {\n    repository = new CategoryInMemoryRepository();\n    useCase = new UpdateCategoryUseCase(repository);\n  });\n\n  it(\"should throws error when entity not found\", async () => {\n    await expect(() =>\n      useCase.execute({ id: \"fake id\", name: \"fake\" })\n    ).rejects.toThrow(new InvalidUuidError());\n\n    const uuid = new Uuid();\n\n    await expect(() =>\n      useCase.execute({ id: uuid.id, name: \"fake\" })\n    ).rejects.toThrow(new NotFoundError(uuid.id, Category));\n  })\n\n  it(\"should update a category\", async () => {\n    const spyUpdate = jest.spyOn(repository, \"update\")\n    const entity = new Category({ name: \"Movie\" })\n    repository.items = [entity];\n\n    let output = await useCase.execute({\n      id: entity.category_id.id,\n      name: \"test\",\n    });\n    expect(spyUpdate).toHaveBeenCalledTimes(1);\n    expect(output).toStrictEqual({\n      id: entity.category_id.id,\n      name: \"test\",\n      description: null,\n      is_active: true,\n      created_at: entity.created_at,\n    });\n\n    type Arrange = {\n      input: {\n        id: string;\n        name: string;\n        description?: null | string;\n        is_active?: boolean;\n      };\n      expected: {\n        id: string;\n        name: string;\n        description: null | string;\n        is_active: boolean;\n        created_at: Date;\n      };\n    };\n\n    const arrange: Arrange[] = [\n      {\n        input: {\n          id: entity.category_id.id,\n          name: \"test\",\n          description: \"some description\",\n        },\n        expected: {\n          id: entity.category_id.id,\n          name: \"test\",\n          description: \"some description\",\n          is_active: true,\n          created_at: entity.created_at,\n        },\n      },\n      {\n        input: {\n          id: entity.category_id.id,\n          name: \"test\",\n        },\n        expected: {\n          id: entity.category_id.id,\n          name: \"test\",\n          description: \"some description\",\n          is_active: true,\n          created_at: entity.created_at,\n        },\n      },\n      {\n        input: {\n          id: entity.category_id.id,\n          name: \"test\",\n          is_active: false,\n        },\n        expected: {\n          id: entity.category_id.id,\n          name: \"test\",\n          description: \"some description\",\n          is_active: false,\n          created_at: entity.created_at,\n        },\n      },\n      {\n        input: {\n          id: entity.category_id.id,\n          name: \"test\",\n        },\n        expected: {\n          id: entity.category_id.id,\n          name: \"test\",\n          description: \"some description\",\n          is_active: false,\n          created_at: entity.created_at,\n        },\n      },\n      {\n        input: {\n          id: entity.category_id.id,\n          name: \"test\",\n          is_active: true,\n        },\n        expected: {\n          id: entity.category_id.id,\n          name: \"test\",\n          description: \"some description\",\n          is_active: true,\n          created_at: entity.created_at,\n        },\n      },\n      {\n        input: {\n          id: entity.category_id.id,\n          name: \"test\",\n          description: \"some description\",\n          is_active: false,\n        },\n        expected: {\n          id: entity.category_id.id,\n          name: \"test\",\n          description: \"some description\",\n          is_active: false,\n          created_at: entity.created_at,\n        },\n      },\n    ];\n    for (const i of arrange) {\n      output = await useCase.execute({\n        id: i.input.id,\n        ...(\"name\" in i.input && { name: i.input.name }),\n        ...(\"description\" in i.input && { description: i.input.description }),\n        ...(\"is_active\" in i.input && { is_active: i.input.is_active }),\n      });\n      expect(output).toStrictEqual({\n        id: entity.category_id.id,\n        name: i.expected.name,\n        description: i.expected.description,\n        is_active: i.expected.is_active,\n        created_at: i.expected.created_at,\n      });\n    }\n  })\n})"
        }
    ]
}