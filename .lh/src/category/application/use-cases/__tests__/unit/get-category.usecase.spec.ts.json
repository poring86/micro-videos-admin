{
    "sourceFile": "src/category/application/use-cases/__tests__/unit/get-category.usecase.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1695247664958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1695247664958,
            "name": "Commit-0",
            "content": "import { NotFoundError } from \"../../../../../shared/domain/errors/not-found.error\"\nimport { InvalidUuidError, Uuid } from \"../../../../../shared/domain/value-objects/uuid.vo\"\nimport { Category } from \"../../../../domain/category.entity\"\nimport { CategoryInMemoryRepository } from \"../../../../infra/db/in-memory/category-in-memory.repository\"\nimport { GetCategoryUseCase } from \"../../get-category/get-category.usecase\"\n\ndescribe(\"GetCategoryUsecase Unit Tests\", () => {\n  let useCase: GetCategoryUseCase\n  let repository: CategoryInMemoryRepository\n\n  beforeEach(() => {\n    repository = new CategoryInMemoryRepository()\n    useCase = new GetCategoryUseCase(repository)\n  })\n\n  it(\"should throws error when entity not found\", async () => {\n    await expect(() => useCase.execute({ id: 'fake id' })).rejects.toThrow(\n      new InvalidUuidError()\n    )\n    const uuid = new Uuid()\n    await expect(() => useCase.execute({ id: uuid.id })).rejects.toThrow(\n      new NotFoundError(uuid.id, Category)\n    )\n  })\n\n  it(\"should should returns a category\", async () => {\n    const items = [Category.create({ name: \"Movie\" })]\n    repository.items = items\n    const spyFindById = jest.spyOn(repository, \"findById\")\n    const output = await useCase.execute({ id: items[0].category_id.id })\n    expect(spyFindById).toHaveBeenCalledTimes(1)\n    expect(output).toStrictEqual({\n      id: items[0].category_id.id,\n      name: \"Movie\",\n      description: null,\n      is_active: true,\n      created_at: items[0].created_at\n    })\n  })\n})"
        }
    ]
}