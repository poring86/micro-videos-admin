{
    "sourceFile": "src/category/application/use-cases/__tests__/integration/list-categories.usecase.int.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1695157738535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1695247972613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { Category } from \"../../../../domain/category.entity\";\n import { CategorySequelizeRepository } from \"../../../../infra/db/sequelize/category-sequelize.repository\";\n import { CategoryModel } from \"../../../../infra/db/sequelize/category.model\";\n import { CategoryOutputMapper } from \"../../common/category-output\";\n-import { ListCategoriesUseCase } from \"../../list-category.usecase\";\n+import { ListCategoriesUseCase } from \"../../list-category/list-category.usecase\";\n \n describe('ListCategoriesUseCase Integration Tests', () => {\n   let useCase: ListCategoriesUseCase;\n   let repository: CategorySequelizeRepository;\n"
                }
            ],
            "date": 1695157738535,
            "name": "Commit-0",
            "content": "import { setupSequelize } from \"../../../../../shared/infra/testing/herpers\";\nimport { Category } from \"../../../../domain/category.entity\";\nimport { CategorySequelizeRepository } from \"../../../../infra/db/sequelize/category-sequelize.repository\";\nimport { CategoryModel } from \"../../../../infra/db/sequelize/category.model\";\nimport { CategoryOutputMapper } from \"../../common/category-output\";\nimport { ListCategoriesUseCase } from \"../../list-category.usecase\";\n\ndescribe('ListCategoriesUseCase Integration Tests', () => {\n  let useCase: ListCategoriesUseCase;\n  let repository: CategorySequelizeRepository;\n\n  setupSequelize({ models: [CategoryModel] });\n\n  beforeEach(() => {\n    repository = new CategorySequelizeRepository(CategoryModel);\n    useCase = new ListCategoriesUseCase(repository);\n  });\n\n  it('should return output sorted by created_at when input param is empty', async () => {\n    const categories = Category.fake()\n      .theCategories(2)\n      .withCreatedAt((i) => new Date(new Date().getTime() + 1000 + i))\n      .build();\n\n    await repository.bulkInsert(categories);\n    const output = await useCase.execute({});\n    expect(output).toEqual({\n      items: [...categories].reverse().map(CategoryOutputMapper.toOutput),\n      total: 2,\n      current_page: 1,\n      per_page: 15,\n      last_page: 1,\n    });\n  });\n\n  it('should returns output using pagination, sort and filter', async () => {\n    const categories = [\n      new Category({ name: 'a' }),\n      new Category({\n        name: 'AAA',\n      }),\n      new Category({\n        name: 'AaA',\n      }),\n      new Category({\n        name: 'b',\n      }),\n      new Category({\n        name: 'c',\n      }),\n    ];\n    await repository.bulkInsert(categories);\n\n    let output = await useCase.execute({\n      page: 1,\n      per_page: 2,\n      sort: 'name',\n      filter: 'a',\n    });\n    expect(output).toEqual({\n      items: [categories[1], categories[2]].map(CategoryOutputMapper.toOutput),\n      total: 3,\n      current_page: 1,\n      per_page: 2,\n      last_page: 2,\n    });\n\n    output = await useCase.execute({\n      page: 2,\n      per_page: 2,\n      sort: 'name',\n      filter: 'a',\n    });\n    expect(output).toEqual({\n      items: [categories[0]].map(CategoryOutputMapper.toOutput),\n      total: 3,\n      current_page: 2,\n      per_page: 2,\n      last_page: 2,\n    });\n\n    output = await useCase.execute({\n      page: 1,\n      per_page: 2,\n      sort: 'name',\n      sort_dir: 'desc',\n      filter: 'a',\n    });\n    expect(output).toEqual({\n      items: [categories[0], categories[2]].map(CategoryOutputMapper.toOutput),\n      total: 3,\n      current_page: 1,\n      per_page: 2,\n      last_page: 2,\n    });\n  });\n});\n"
        }
    ]
}