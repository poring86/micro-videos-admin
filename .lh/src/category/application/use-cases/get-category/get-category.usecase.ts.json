{
    "sourceFile": "src/category/application/use-cases/get-category/get-category.usecase.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1695247664957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1695247664957,
            "name": "Commit-0",
            "content": "import { IUseCase } from \"../../../../shared/application/use-case.interface\"\nimport { NotFoundError } from \"../../../../shared/domain/errors/not-found.error\"\nimport { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\"\nimport { Category } from \"../../../domain/category.entity\"\nimport { ICategoryRepository } from \"../../../domain/category.repository\"\nimport { CategoryOutput, CategoryOutputMapper } from \"../common/category-output\"\n\n\nexport class GetCategoryUseCase implements IUseCase<GetCategoryInput, GetCategoryOutput>{\n  constructor(private readonly categoryRepo: ICategoryRepository) { }\n\n  async execute(input: GetCategoryInput): Promise<GetCategoryOutput> {\n    const uuid = new Uuid(input.id)\n    const category = await this.categoryRepo.findById(uuid)\n    if (!category) {\n      throw new NotFoundError(input.id, Category)\n    }\n    return CategoryOutputMapper.toOutput(category)\n  }\n}\n\nexport type GetCategoryInput = {\n  id: string\n}\n\nexport type GetCategoryOutput = CategoryOutput"
        }
    ]
}