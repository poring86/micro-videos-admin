{
    "sourceFile": "src/category/application/use-cases/get-category/__tests__/get-category.usecase.int.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1695247917072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1695247917072,
            "name": "Commit-0",
            "content": "import { NotFoundError } from \"../../../../../shared/domain/errors/not-found.error\";\nimport { Uuid } from \"../../../../../shared/domain/value-objects/uuid.vo\";\nimport { setupSequelize } from \"../../../../../shared/infra/testing/herpers\";\nimport { Category } from \"../../../../domain/category.entity\";\nimport { CategorySequelizeRepository } from \"../../../../infra/db/sequelize/category-sequelize.repository\";\nimport { CategoryModel } from \"../../../../infra/db/sequelize/category.model\";\nimport { GetCategoryUseCase } from \"../get-category.usecase\";\n\ndescribe(\"GetCategoryUseCase Integration Tests\", () => {\n  let useCase: GetCategoryUseCase;\n  let repository: CategorySequelizeRepository;\n\n  setupSequelize({ models: [CategoryModel] });\n\n  beforeEach(() => {\n    repository = new CategorySequelizeRepository(CategoryModel);\n    useCase = new GetCategoryUseCase(repository);\n  });\n\n  it(\"should throws error when entity not found\", async () => {\n    const uuid = new Uuid();\n    await expect(() => useCase.execute({ id: uuid.id })).rejects.toThrow(\n      new NotFoundError(uuid.id, Category)\n    );\n  });\n\n  it(\"should returns a category\", async () => {\n    const category = Category.fake().aCategory().build();\n    await repository.insert(category);\n    const output = await useCase.execute({ id: category.category_id.id });\n    expect(output).toStrictEqual({\n      id: category.category_id.id,\n      name: category.name,\n      description: category.description,\n      is_active: category.is_active,\n      created_at: category.created_at,\n    });\n  });\n});\n"
        }
    ]
}