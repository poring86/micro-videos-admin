{
    "sourceFile": "src/category/infra/db/sequelize/category-sequelize.repository.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1694810047957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1694810200941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\n import { Category } from \"../../../domain/category.entity\";\n \n export class CategorySequelizeRepository implements ISearchableRepository<Category, Uuid>{\n-  sortableFields: string[];\n+  sortableFields: string[] = ['name', 'created_at'];\n   search(props: SearchParams<string>): Promise<SearchResult<Entity>> {\n     throw new Error(\"Method not implemented.\");\n   }\n   insert(entity: Category): Promise<void> {\n"
                },
                {
                    "date": 1694810410506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,11 @@\n import { SearchParams } from \"../../../../shared/domain/repository/search-params\";\n import { SearchResult } from \"../../../../shared/domain/repository/search-result\";\n import { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\n import { Category } from \"../../../domain/category.entity\";\n+import { ICategoryRepository } from \"../../../domain/category.repository\";\n \n-export class CategorySequelizeRepository implements ISearchableRepository<Category, Uuid>{\n+export class CategorySequelizeRepository implements ICategoryRepository {\n   sortableFields: string[] = ['name', 'created_at'];\n   search(props: SearchParams<string>): Promise<SearchResult<Entity>> {\n     throw new Error(\"Method not implemented.\");\n   }\n"
                },
                {
                    "date": 1694810430216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,15 +3,15 @@\n import { SearchParams } from \"../../../../shared/domain/repository/search-params\";\n import { SearchResult } from \"../../../../shared/domain/repository/search-result\";\n import { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\n import { Category } from \"../../../domain/category.entity\";\n-import { ICategoryRepository } from \"../../../domain/category.repository\";\n+import { CategorySearchParams, CategorySearchResult, ICategoryRepository } from \"../../../domain/category.repository\";\n \n export class CategorySequelizeRepository implements ICategoryRepository {\n-  sortableFields: string[] = ['name', 'created_at'];\n-  search(props: SearchParams<string>): Promise<SearchResult<Entity>> {\n+  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n     throw new Error(\"Method not implemented.\");\n   }\n+  sortableFields: string[] = ['name', 'created_at'];\n   insert(entity: Category): Promise<void> {\n     throw new Error(\"Method not implemented.\");\n   }\n   bulkInsert(entity: Category): Promise<void> {\n"
                },
                {
                    "date": 1694810653517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,15 @@\n     throw new Error(\"Method not implemented.\");\n   }\n   sortableFields: string[] = ['name', 'created_at'];\n   insert(entity: Category): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n+    this.categoryModel.create({\n+      id: entity.category_id.id,\n+      name: entity.name,\n+      description: entity.description,\n+      is_active: entity.is_active,\n+      created_at: entity.created_at\n+    })\n   }\n   bulkInsert(entity: Category): Promise<void> {\n     throw new Error(\"Method not implemented.\");\n   }\n"
                },
                {
                    "date": 1694810710002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,14 @@\n import { SearchResult } from \"../../../../shared/domain/repository/search-result\";\n import { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\n import { Category } from \"../../../domain/category.entity\";\n import { CategorySearchParams, CategorySearchResult, ICategoryRepository } from \"../../../domain/category.repository\";\n+import { CategoryModel } from \"./category.model\";\n \n export class CategorySequelizeRepository implements ICategoryRepository {\n+\n+  constructor(private categoryModel: typeof CategoryModel)\n+\n   search(props: CategorySearchParams): Promise<CategorySearchResult> {\n     throw new Error(\"Method not implemented.\");\n   }\n   sortableFields: string[] = ['name', 'created_at'];\n"
                },
                {
                    "date": 1694818606273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,11 +10,8 @@\n export class CategorySequelizeRepository implements ICategoryRepository {\n \n   constructor(private categoryModel: typeof CategoryModel)\n \n-  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n   sortableFields: string[] = ['name', 'created_at'];\n   insert(entity: Category): Promise<void> {\n     this.categoryModel.create({\n       id: entity.category_id.id,\n"
                },
                {
                    "date": 1694818617940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n export class CategorySequelizeRepository implements ICategoryRepository {\n \n   constructor(private categoryModel: typeof CategoryModel)\n \n+\n   sortableFields: string[] = ['name', 'created_at'];\n   insert(entity: Category): Promise<void> {\n     this.categoryModel.create({\n       id: entity.category_id.id,\n@@ -20,8 +21,12 @@\n       is_active: entity.is_active,\n       created_at: entity.created_at\n     })\n   }\n+\n+  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n   bulkInsert(entity: Category): Promise<void> {\n     throw new Error(\"Method not implemented.\");\n   }\n   update(entity: Category): Promise<void> {\n"
                },
                {
                    "date": 1694818646001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+\n+import { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\n+import { Category } from \"../../../domain/category.entity\";\n+import { CategorySearchParams, CategorySearchResult, ICategoryRepository } from \"../../../domain/category.repository\";\n+import { CategoryModel } from \"./category.model\";\n+\n+export class CategorySequelizeRepository implements ICategoryRepository {\n+\n+  constructor(private categoryModel: typeof CategoryModel)\n+\n+\n+  sortableFields: string[] = ['name', 'created_at'];\n+  insert(entity: Category): Promise<void> {\n+    this.categoryModel.create({\n+      id: entity.category_id.id,\n+      name: entity.name,\n+      description: entity.description,\n+      is_active: entity.is_active,\n+      created_at: entity.created_at\n+    })\n+  }\n+\n+  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  bulkInsert(entity: Category): Promise<void> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  update(entity: Category): Promise<void> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  delete(entity_id: Uuid): Promise<void> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  findById(entity_id: Uuid): Promise<Category> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  findAll(): Promise<Category[]> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  getEntity(): new (...args: any[]) => Category {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694818672553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,61 +4,14 @@\n import { CategorySearchParams, CategorySearchResult, ICategoryRepository } from \"../../../domain/category.repository\";\n import { CategoryModel } from \"./category.model\";\n \n export class CategorySequelizeRepository implements ICategoryRepository {\n+  sortableFields: string[] = ['name', 'created_at'];\n \n   constructor(private categoryModel: typeof CategoryModel)\n \n \n-  sortableFields: string[] = ['name', 'created_at'];\n-  insert(entity: Category): Promise<void> {\n-    this.categoryModel.create({\n-      id: entity.category_id.id,\n-      name: entity.name,\n-      description: entity.description,\n-      is_active: entity.is_active,\n-      created_at: entity.created_at\n-    })\n-  }\n \n-  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  bulkInsert(entity: Category): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  update(entity: Category): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  delete(entity_id: Uuid): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  findById(entity_id: Uuid): Promise<Category> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  findAll(): Promise<Category[]> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  getEntity(): new (...args: any[]) => Category {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-\n-}\n-import { Entity } from \"../../../../shared/domain/entity\";\n-import { ISearchableRepository } from \"../../../../shared/domain/repository/repository-interface\";\n-import { SearchParams } from \"../../../../shared/domain/repository/search-params\";\n-import { SearchResult } from \"../../../../shared/domain/repository/search-result\";\n-import { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\n-import { Category } from \"../../../domain/category.entity\";\n-import { CategorySearchParams, CategorySearchResult, ICategoryRepository } from \"../../../domain/category.repository\";\n-import { CategoryModel } from \"./category.model\";\n-\n-export class CategorySequelizeRepository implements ICategoryRepository {\n-\n-  constructor(private categoryModel: typeof CategoryModel)\n-\n-\n-  sortableFields: string[] = ['name', 'created_at'];\n   insert(entity: Category): Promise<void> {\n     this.categoryModel.create({\n       id: entity.category_id.id,\n       name: entity.name,\n"
                },
                {
                    "date": 1694818695540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+\n+import { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\n+import { Category } from \"../../../domain/category.entity\";\n+import { CategorySearchParams, CategorySearchResult, ICategoryRepository } from \"../../../domain/category.repository\";\n+import { CategoryModel } from \"./category.model\";\n+\n+export class CategorySequelizeRepository implements ICategoryRepository {\n+  sortableFields: string[] = ['name', 'created_at'];\n+\n+  constructor(private categoryModel: typeof CategoryModel)\n+\n+\n+\n+  async insert(entity: Category): Promise<void> {\n+    await this.categoryModel.create({\n+      id: entity.category_id.id,\n+      name: entity.name,\n+      description: entity.description,\n+      is_active: entity.is_active,\n+      created_at: entity.created_at\n+    })\n+  }\n+\n+  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  bulkInsert(entity: Category): Promise<void> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  update(entity: Category): Promise<void> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  delete(entity_id: Uuid): Promise<void> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  findById(entity_id: Uuid): Promise<Category> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  findAll(): Promise<Category[]> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  getEntity(): new (...args: any[]) => Category {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694819483035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \n export class CategorySequelizeRepository implements ICategoryRepository {\n   sortableFields: string[] = ['name', 'created_at'];\n \n-  constructor(private categoryModel: typeof CategoryModel)\n+  constructor(private categoryModel: typeof CategoryModel) { }\n \n \n \n   async insert(entity: Category): Promise<void> {\n@@ -42,51 +42,5 @@\n   getEntity(): new (...args: any[]) => Category {\n     throw new Error(\"Method not implemented.\");\n   }\n \n-}\n-\n-import { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\n-import { Category } from \"../../../domain/category.entity\";\n-import { CategorySearchParams, CategorySearchResult, ICategoryRepository } from \"../../../domain/category.repository\";\n-import { CategoryModel } from \"./category.model\";\n-\n-export class CategorySequelizeRepository implements ICategoryRepository {\n-  sortableFields: string[] = ['name', 'created_at'];\n-\n-  constructor(private categoryModel: typeof CategoryModel)\n-\n-\n-\n-  insert(entity: Category): Promise<void> {\n-    this.categoryModel.create({\n-      id: entity.category_id.id,\n-      name: entity.name,\n-      description: entity.description,\n-      is_active: entity.is_active,\n-      created_at: entity.created_at\n-    })\n-  }\n-\n-  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  bulkInsert(entity: Category): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  update(entity: Category): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  delete(entity_id: Uuid): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  findById(entity_id: Uuid): Promise<Category> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  findAll(): Promise<Category[]> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  getEntity(): new (...args: any[]) => Category {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694819892222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,14 +20,18 @@\n       created_at: entity.created_at\n     })\n   }\n \n-  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n-    throw new Error(\"Method not implemented.\");\n+\n+  async bulkInsert(entities: Category[]): Promise<void> {\n+    await this.categoryModel.bulkCreate(entities.map((entity){\n+      id: entity.category_id.id,\n+        name: entity.name,\n+          description: entity.description,\n+            is_active: entity.is_active,\n+              created_at: entity.created_at\n+    })))\n   }\n-  bulkInsert(entity: Category): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n   update(entity: Category): Promise<void> {\n     throw new Error(\"Method not implemented.\");\n   }\n   delete(entity_id: Uuid): Promise<void> {\n@@ -42,5 +46,9 @@\n   getEntity(): new (...args: any[]) => Category {\n     throw new Error(\"Method not implemented.\");\n   }\n \n+  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694819904648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,14 +22,14 @@\n   }\n \n \n   async bulkInsert(entities: Category[]): Promise<void> {\n-    await this.categoryModel.bulkCreate(entities.map((entity){\n+    await this.categoryModel.bulkCreate(entities.map((entity) => ({\n       id: entity.category_id.id,\n-        name: entity.name,\n-          description: entity.description,\n-            is_active: entity.is_active,\n-              created_at: entity.created_at\n+      name: entity.name,\n+      description: entity.description,\n+      is_active: entity.is_active,\n+      created_at: entity.created_at\n     })))\n   }\n   update(entity: Category): Promise<void> {\n     throw new Error(\"Method not implemented.\");\n"
                },
                {
                    "date": 1694955033719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,54 +1,114 @@\n \n+import { Op } from \"sequelize\";\n+import { NotFoundError } from \"../../../../shared/domain/errors/not-found.error\";\n import { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\n import { Category } from \"../../../domain/category.entity\";\n import { CategorySearchParams, CategorySearchResult, ICategoryRepository } from \"../../../domain/category.repository\";\n import { CategoryModel } from \"./category.model\";\n+import { CategoryModelMapper } from \"./category-mapper\";\n \n export class CategorySequelizeRepository implements ICategoryRepository {\n+  findByPk(id: string) {\n+    throw new Error(\"Method not implemented.\");\n+  }\n   sortableFields: string[] = ['name', 'created_at'];\n \n   constructor(private categoryModel: typeof CategoryModel) { }\n \n+  async insert(entity: Category): Promise<void> {\n+    const model = CategoryModelMapper.toModel(entity.toJSON())\n+    await this.categoryModel.create(model)\n+  }\n \n-\n-  async insert(entity: Category): Promise<void> {\n-    await this.categoryModel.create({\n+  async bulkInsert(entities: Category[]): Promise<void> {\n+    await this.categoryModel.bulkCreate(entities.map((entity) => ({\n       id: entity.category_id.id,\n       name: entity.name,\n       description: entity.description,\n       is_active: entity.is_active,\n       created_at: entity.created_at\n-    })\n+    })))\n   }\n-\n-\n-  async bulkInsert(entities: Category[]): Promise<void> {\n-    await this.categoryModel.bulkCreate(entities.map((entity) => ({\n+  async update(entity: Category): Promise<void> {\n+    const id = entity.category_id.id\n+    const model = await this._get(id)\n+    if (!model) {\n+      throw new NotFoundError(id, this.getEntity())\n+    }\n+    await this.categoryModel.update({\n       id: entity.category_id.id,\n       name: entity.name,\n       description: entity.description,\n       is_active: entity.is_active,\n       created_at: entity.created_at\n-    })))\n+    }, { where: { category_id: id } })\n   }\n-  update(entity: Category): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n+  async delete(category_id: Uuid): Promise<void> {\n+    const id = category_id.id\n+    const model = await this._get(id)\n+    if (!model) {\n+      throw new NotFoundError(id, this.getEntity())\n+    }\n+    await this.categoryModel.destroy({ where: { category_id: id } })\n   }\n-  delete(entity_id: Uuid): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n+  async findById(category_id: Uuid): Promise<Category | null> {\n+    const model = await this._get(category_id.id)\n+    return model ? new Category({\n+      category_id: new Uuid(model.category_id),\n+      name: model.name,\n+      description: model.description,\n+      is_active: model.is_active,\n+      created_at: model.created_at\n+    }) : null\n   }\n-  findById(entity_id: Uuid): Promise<Category> {\n-    throw new Error(\"Method not implemented.\");\n+  private async _get(id: string) {\n+    return await this.categoryModel.findByPk(id);\n   }\n-  findAll(): Promise<Category[]> {\n-    throw new Error(\"Method not implemented.\");\n+  async findAll(): Promise<Category[]> {\n+    const models = await this.categoryModel.findAll()\n+    return models.map((model) => {\n+      return new Category({\n+        category_id: new Uuid(model.category_id),\n+        name: model.name,\n+        description: model.description,\n+        is_active: model.is_active,\n+        created_at: model.created_at\n+      })\n+    })\n   }\n   getEntity(): new (...args: any[]) => Category {\n-    throw new Error(\"Method not implemented.\");\n+    return Category;\n   }\n \n-  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n-    throw new Error(\"Method not implemented.\");\n+  async search(props: CategorySearchParams): Promise<CategorySearchResult> {\n+    const offset = (props.page - 1) * props.per_page\n+    const limit = props.per_page\n+    const { rows: models, count } = await this.categoryModel.findAndCountAll({\n+      ...(props.filter && {\n+        where: {\n+          name: { [Op.like]: `%${props.filter}` }\n+        }\n+      }),\n+      ...(props.sort && this.sortableFields.includes(props.sort)\n+        ? { order: [[props.sort, props.sort_dir]] }\n+        : { order: [[\"created_at\", \"desc\"]] }),\n+      offset,\n+      limit\n+    })\n+    return new CategorySearchResult({\n+      items: models.map((model) => {\n+        return new Category({\n+          category_id: new Uuid(model.category_id),\n+          name: model.name,\n+          description: model.description,\n+          is_active: model.is_active,\n+          created_at: model.created_at\n+        })\n+      }),\n+      current_page: props.page,\n+      per_page: props.per_page,\n+      total: count\n+    })\n   }\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694955256905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,10 @@\n \n   constructor(private categoryModel: typeof CategoryModel) { }\n \n   async insert(entity: Category): Promise<void> {\n-    const model = CategoryModelMapper.toModel(entity.toJSON())\n-    await this.categoryModel.create(model)\n+    onst modelProps = CategoryModelMapper.toModel(entity);\n+    await this.categoryModel.create(modelProps.toJSON());\n   }\n \n   async bulkInsert(entities: Category[]): Promise<void> {\n     await this.categoryModel.bulkCreate(entities.map((entity) => ({\n"
                },
                {
                    "date": 1694955294007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,10 @@\n \n   constructor(private categoryModel: typeof CategoryModel) { }\n \n   async insert(entity: Category): Promise<void> {\n-    onst modelProps = CategoryModelMapper.toModel(entity);\n-    await this.categoryModel.create(modelProps.toJSON());\n+    const model = CategoryModelMapper.toModel(entity)\n+    await this.categoryModel.create(model.toJSON())\n   }\n \n   async bulkInsert(entities: Category[]): Promise<void> {\n     await this.categoryModel.bulkCreate(entities.map((entity) => ({\n"
                },
                {
                    "date": 1694955639769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,15 +20,10 @@\n     await this.categoryModel.create(model.toJSON())\n   }\n \n   async bulkInsert(entities: Category[]): Promise<void> {\n-    await this.categoryModel.bulkCreate(entities.map((entity) => ({\n-      id: entity.category_id.id,\n-      name: entity.name,\n-      description: entity.description,\n-      is_active: entity.is_active,\n-      created_at: entity.created_at\n-    })))\n+    const models = entities.map((entity) => CategoryModelMapper.toModel(entity))\n+    await this.categoryModel.bulkCreate(models)\n   }\n   async update(entity: Category): Promise<void> {\n     const id = entity.category_id.id\n     const model = await this._get(id)\n"
                },
                {
                    "date": 1694955693448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     await this.categoryModel.create(model.toJSON())\n   }\n \n   async bulkInsert(entities: Category[]): Promise<void> {\n-    const models = entities.map((entity) => CategoryModelMapper.toModel(entity))\n+    const models = entities.map((entity) => CategoryModelMapper.toModel(entity).toJSON())\n     await this.categoryModel.bulkCreate(models)\n   }\n   async update(entity: Category): Promise<void> {\n     const id = entity.category_id.id\n"
                },
                {
                    "date": 1694955981751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,17 +26,16 @@\n   }\n   async update(entity: Category): Promise<void> {\n     const id = entity.category_id.id\n     const model = await this._get(id)\n+\n     if (!model) {\n       throw new NotFoundError(id, this.getEntity())\n     }\n+\n+    const modelToUpdate = CategoryModelMapper.toModel(entity)\n     await this.categoryModel.update({\n-      id: entity.category_id.id,\n-      name: entity.name,\n-      description: entity.description,\n-      is_active: entity.is_active,\n-      created_at: entity.created_at\n+      modelToUpdate.toJSON()\n     }, { where: { category_id: id } })\n   }\n   async delete(category_id: Uuid): Promise<void> {\n     const id = category_id.id\n"
                },
                {
                    "date": 1694956144598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,9 @@\n       throw new NotFoundError(id, this.getEntity())\n     }\n \n     const modelToUpdate = CategoryModelMapper.toModel(entity)\n-    await this.categoryModel.update({\n-      modelToUpdate.toJSON()\n-    }, { where: { category_id: id } })\n+    await this.categoryModel.update(modelToUpdate.toJSON(), { where: { category_id: id } })\n   }\n   async delete(category_id: Uuid): Promise<void> {\n     const id = category_id.id\n     const model = await this._get(id)\n"
                },
                {
                    "date": 1694960878675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,15 +58,9 @@\n   }\n   async findAll(): Promise<Category[]> {\n     const models = await this.categoryModel.findAll()\n     return models.map((model) => {\n-      return new Category({\n-        category_id: new Uuid(model.category_id),\n-        name: model.name,\n-        description: model.description,\n-        is_active: model.is_active,\n-        created_at: model.created_at\n-      })\n+      return CategoryModelMapper.toEntity(model)\n     })\n   }\n   getEntity(): new (...args: any[]) => Category {\n     return Category;\n"
                },
                {
                    "date": 1694968774617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,15 +82,9 @@\n       limit\n     })\n     return new CategorySearchResult({\n       items: models.map((model) => {\n-        return new Category({\n-          category_id: new Uuid(model.category_id),\n-          name: model.name,\n-          description: model.description,\n-          is_active: model.is_active,\n-          created_at: model.created_at\n-        })\n+        return CategoryModelMapper.toEntity(model)\n       }),\n       current_page: props.page,\n       per_page: props.per_page,\n       total: count\n"
                }
            ],
            "date": 1694810047957,
            "name": "Commit-0",
            "content": "import { Entity } from \"../../../../shared/domain/entity\";\nimport { ISearchableRepository } from \"../../../../shared/domain/repository/repository-interface\";\nimport { SearchParams } from \"../../../../shared/domain/repository/search-params\";\nimport { SearchResult } from \"../../../../shared/domain/repository/search-result\";\nimport { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\nimport { Category } from \"../../../domain/category.entity\";\n\nexport class CategorySequelizeRepository implements ISearchableRepository<Category, Uuid>{\n  sortableFields: string[];\n  search(props: SearchParams<string>): Promise<SearchResult<Entity>> {\n    throw new Error(\"Method not implemented.\");\n  }\n  insert(entity: Category): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n  bulkInsert(entity: Category): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n  update(entity: Category): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n  delete(entity_id: Uuid): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n  findById(entity_id: Uuid): Promise<Category> {\n    throw new Error(\"Method not implemented.\");\n  }\n  findAll(): Promise<Category[]> {\n    throw new Error(\"Method not implemented.\");\n  }\n  getEntity(): new (...args: any[]) => Category {\n    throw new Error(\"Method not implemented.\");\n  }\n\n}"
        }
    ]
}