{
    "sourceFile": "src/category/infra/db/sequelize/category-sequelize.repository.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1694810047957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1694810200941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\n import { Category } from \"../../../domain/category.entity\";\n \n export class CategorySequelizeRepository implements ISearchableRepository<Category, Uuid>{\n-  sortableFields: string[];\n+  sortableFields: string[] = ['name', 'created_at'];\n   search(props: SearchParams<string>): Promise<SearchResult<Entity>> {\n     throw new Error(\"Method not implemented.\");\n   }\n   insert(entity: Category): Promise<void> {\n"
                },
                {
                    "date": 1694810410506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,11 @@\n import { SearchParams } from \"../../../../shared/domain/repository/search-params\";\n import { SearchResult } from \"../../../../shared/domain/repository/search-result\";\n import { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\n import { Category } from \"../../../domain/category.entity\";\n+import { ICategoryRepository } from \"../../../domain/category.repository\";\n \n-export class CategorySequelizeRepository implements ISearchableRepository<Category, Uuid>{\n+export class CategorySequelizeRepository implements ICategoryRepository {\n   sortableFields: string[] = ['name', 'created_at'];\n   search(props: SearchParams<string>): Promise<SearchResult<Entity>> {\n     throw new Error(\"Method not implemented.\");\n   }\n"
                },
                {
                    "date": 1694810430216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,15 +3,15 @@\n import { SearchParams } from \"../../../../shared/domain/repository/search-params\";\n import { SearchResult } from \"../../../../shared/domain/repository/search-result\";\n import { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\n import { Category } from \"../../../domain/category.entity\";\n-import { ICategoryRepository } from \"../../../domain/category.repository\";\n+import { CategorySearchParams, CategorySearchResult, ICategoryRepository } from \"../../../domain/category.repository\";\n \n export class CategorySequelizeRepository implements ICategoryRepository {\n-  sortableFields: string[] = ['name', 'created_at'];\n-  search(props: SearchParams<string>): Promise<SearchResult<Entity>> {\n+  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n     throw new Error(\"Method not implemented.\");\n   }\n+  sortableFields: string[] = ['name', 'created_at'];\n   insert(entity: Category): Promise<void> {\n     throw new Error(\"Method not implemented.\");\n   }\n   bulkInsert(entity: Category): Promise<void> {\n"
                },
                {
                    "date": 1694810653517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,15 @@\n     throw new Error(\"Method not implemented.\");\n   }\n   sortableFields: string[] = ['name', 'created_at'];\n   insert(entity: Category): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n+    this.categoryModel.create({\n+      id: entity.category_id.id,\n+      name: entity.name,\n+      description: entity.description,\n+      is_active: entity.is_active,\n+      created_at: entity.created_at\n+    })\n   }\n   bulkInsert(entity: Category): Promise<void> {\n     throw new Error(\"Method not implemented.\");\n   }\n"
                },
                {
                    "date": 1694810710002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,14 @@\n import { SearchResult } from \"../../../../shared/domain/repository/search-result\";\n import { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\n import { Category } from \"../../../domain/category.entity\";\n import { CategorySearchParams, CategorySearchResult, ICategoryRepository } from \"../../../domain/category.repository\";\n+import { CategoryModel } from \"./category.model\";\n \n export class CategorySequelizeRepository implements ICategoryRepository {\n+\n+  constructor(private categoryModel: typeof CategoryModel)\n+\n   search(props: CategorySearchParams): Promise<CategorySearchResult> {\n     throw new Error(\"Method not implemented.\");\n   }\n   sortableFields: string[] = ['name', 'created_at'];\n"
                },
                {
                    "date": 1694818606273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,11 +10,8 @@\n export class CategorySequelizeRepository implements ICategoryRepository {\n \n   constructor(private categoryModel: typeof CategoryModel)\n \n-  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n   sortableFields: string[] = ['name', 'created_at'];\n   insert(entity: Category): Promise<void> {\n     this.categoryModel.create({\n       id: entity.category_id.id,\n"
                },
                {
                    "date": 1694818617940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n export class CategorySequelizeRepository implements ICategoryRepository {\n \n   constructor(private categoryModel: typeof CategoryModel)\n \n+\n   sortableFields: string[] = ['name', 'created_at'];\n   insert(entity: Category): Promise<void> {\n     this.categoryModel.create({\n       id: entity.category_id.id,\n@@ -20,8 +21,12 @@\n       is_active: entity.is_active,\n       created_at: entity.created_at\n     })\n   }\n+\n+  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n   bulkInsert(entity: Category): Promise<void> {\n     throw new Error(\"Method not implemented.\");\n   }\n   update(entity: Category): Promise<void> {\n"
                },
                {
                    "date": 1694818646001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+\n+import { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\n+import { Category } from \"../../../domain/category.entity\";\n+import { CategorySearchParams, CategorySearchResult, ICategoryRepository } from \"../../../domain/category.repository\";\n+import { CategoryModel } from \"./category.model\";\n+\n+export class CategorySequelizeRepository implements ICategoryRepository {\n+\n+  constructor(private categoryModel: typeof CategoryModel)\n+\n+\n+  sortableFields: string[] = ['name', 'created_at'];\n+  insert(entity: Category): Promise<void> {\n+    this.categoryModel.create({\n+      id: entity.category_id.id,\n+      name: entity.name,\n+      description: entity.description,\n+      is_active: entity.is_active,\n+      created_at: entity.created_at\n+    })\n+  }\n+\n+  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  bulkInsert(entity: Category): Promise<void> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  update(entity: Category): Promise<void> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  delete(entity_id: Uuid): Promise<void> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  findById(entity_id: Uuid): Promise<Category> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  findAll(): Promise<Category[]> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  getEntity(): new (...args: any[]) => Category {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694818672553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,61 +4,14 @@\n import { CategorySearchParams, CategorySearchResult, ICategoryRepository } from \"../../../domain/category.repository\";\n import { CategoryModel } from \"./category.model\";\n \n export class CategorySequelizeRepository implements ICategoryRepository {\n+  sortableFields: string[] = ['name', 'created_at'];\n \n   constructor(private categoryModel: typeof CategoryModel)\n \n \n-  sortableFields: string[] = ['name', 'created_at'];\n-  insert(entity: Category): Promise<void> {\n-    this.categoryModel.create({\n-      id: entity.category_id.id,\n-      name: entity.name,\n-      description: entity.description,\n-      is_active: entity.is_active,\n-      created_at: entity.created_at\n-    })\n-  }\n \n-  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  bulkInsert(entity: Category): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  update(entity: Category): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  delete(entity_id: Uuid): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  findById(entity_id: Uuid): Promise<Category> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  findAll(): Promise<Category[]> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  getEntity(): new (...args: any[]) => Category {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-\n-}\n-import { Entity } from \"../../../../shared/domain/entity\";\n-import { ISearchableRepository } from \"../../../../shared/domain/repository/repository-interface\";\n-import { SearchParams } from \"../../../../shared/domain/repository/search-params\";\n-import { SearchResult } from \"../../../../shared/domain/repository/search-result\";\n-import { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\n-import { Category } from \"../../../domain/category.entity\";\n-import { CategorySearchParams, CategorySearchResult, ICategoryRepository } from \"../../../domain/category.repository\";\n-import { CategoryModel } from \"./category.model\";\n-\n-export class CategorySequelizeRepository implements ICategoryRepository {\n-\n-  constructor(private categoryModel: typeof CategoryModel)\n-\n-\n-  sortableFields: string[] = ['name', 'created_at'];\n   insert(entity: Category): Promise<void> {\n     this.categoryModel.create({\n       id: entity.category_id.id,\n       name: entity.name,\n"
                },
                {
                    "date": 1694818695540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+\n+import { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\n+import { Category } from \"../../../domain/category.entity\";\n+import { CategorySearchParams, CategorySearchResult, ICategoryRepository } from \"../../../domain/category.repository\";\n+import { CategoryModel } from \"./category.model\";\n+\n+export class CategorySequelizeRepository implements ICategoryRepository {\n+  sortableFields: string[] = ['name', 'created_at'];\n+\n+  constructor(private categoryModel: typeof CategoryModel)\n+\n+\n+\n+  async insert(entity: Category): Promise<void> {\n+    await this.categoryModel.create({\n+      id: entity.category_id.id,\n+      name: entity.name,\n+      description: entity.description,\n+      is_active: entity.is_active,\n+      created_at: entity.created_at\n+    })\n+  }\n+\n+  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  bulkInsert(entity: Category): Promise<void> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  update(entity: Category): Promise<void> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  delete(entity_id: Uuid): Promise<void> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  findById(entity_id: Uuid): Promise<Category> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  findAll(): Promise<Category[]> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+  getEntity(): new (...args: any[]) => Category {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694819483035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \n export class CategorySequelizeRepository implements ICategoryRepository {\n   sortableFields: string[] = ['name', 'created_at'];\n \n-  constructor(private categoryModel: typeof CategoryModel)\n+  constructor(private categoryModel: typeof CategoryModel) { }\n \n \n \n   async insert(entity: Category): Promise<void> {\n@@ -42,51 +42,5 @@\n   getEntity(): new (...args: any[]) => Category {\n     throw new Error(\"Method not implemented.\");\n   }\n \n-}\n-\n-import { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\n-import { Category } from \"../../../domain/category.entity\";\n-import { CategorySearchParams, CategorySearchResult, ICategoryRepository } from \"../../../domain/category.repository\";\n-import { CategoryModel } from \"./category.model\";\n-\n-export class CategorySequelizeRepository implements ICategoryRepository {\n-  sortableFields: string[] = ['name', 'created_at'];\n-\n-  constructor(private categoryModel: typeof CategoryModel)\n-\n-\n-\n-  insert(entity: Category): Promise<void> {\n-    this.categoryModel.create({\n-      id: entity.category_id.id,\n-      name: entity.name,\n-      description: entity.description,\n-      is_active: entity.is_active,\n-      created_at: entity.created_at\n-    })\n-  }\n-\n-  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  bulkInsert(entity: Category): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  update(entity: Category): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  delete(entity_id: Uuid): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  findById(entity_id: Uuid): Promise<Category> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  findAll(): Promise<Category[]> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-  getEntity(): new (...args: any[]) => Category {\n-    throw new Error(\"Method not implemented.\");\n-  }\n-\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694819892222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,14 +20,18 @@\n       created_at: entity.created_at\n     })\n   }\n \n-  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n-    throw new Error(\"Method not implemented.\");\n+\n+  async bulkInsert(entities: Category[]): Promise<void> {\n+    await this.categoryModel.bulkCreate(entities.map((entity){\n+      id: entity.category_id.id,\n+        name: entity.name,\n+          description: entity.description,\n+            is_active: entity.is_active,\n+              created_at: entity.created_at\n+    })))\n   }\n-  bulkInsert(entity: Category): Promise<void> {\n-    throw new Error(\"Method not implemented.\");\n-  }\n   update(entity: Category): Promise<void> {\n     throw new Error(\"Method not implemented.\");\n   }\n   delete(entity_id: Uuid): Promise<void> {\n@@ -42,5 +46,9 @@\n   getEntity(): new (...args: any[]) => Category {\n     throw new Error(\"Method not implemented.\");\n   }\n \n+  search(props: CategorySearchParams): Promise<CategorySearchResult> {\n+    throw new Error(\"Method not implemented.\");\n+  }\n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694819904648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,14 +22,14 @@\n   }\n \n \n   async bulkInsert(entities: Category[]): Promise<void> {\n-    await this.categoryModel.bulkCreate(entities.map((entity){\n+    await this.categoryModel.bulkCreate(entities.map((entity) => ({\n       id: entity.category_id.id,\n-        name: entity.name,\n-          description: entity.description,\n-            is_active: entity.is_active,\n-              created_at: entity.created_at\n+      name: entity.name,\n+      description: entity.description,\n+      is_active: entity.is_active,\n+      created_at: entity.created_at\n     })))\n   }\n   update(entity: Category): Promise<void> {\n     throw new Error(\"Method not implemented.\");\n"
                }
            ],
            "date": 1694810047957,
            "name": "Commit-0",
            "content": "import { Entity } from \"../../../../shared/domain/entity\";\nimport { ISearchableRepository } from \"../../../../shared/domain/repository/repository-interface\";\nimport { SearchParams } from \"../../../../shared/domain/repository/search-params\";\nimport { SearchResult } from \"../../../../shared/domain/repository/search-result\";\nimport { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\nimport { Category } from \"../../../domain/category.entity\";\n\nexport class CategorySequelizeRepository implements ISearchableRepository<Category, Uuid>{\n  sortableFields: string[];\n  search(props: SearchParams<string>): Promise<SearchResult<Entity>> {\n    throw new Error(\"Method not implemented.\");\n  }\n  insert(entity: Category): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n  bulkInsert(entity: Category): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n  update(entity: Category): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n  delete(entity_id: Uuid): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n  findById(entity_id: Uuid): Promise<Category> {\n    throw new Error(\"Method not implemented.\");\n  }\n  findAll(): Promise<Category[]> {\n    throw new Error(\"Method not implemented.\");\n  }\n  getEntity(): new (...args: any[]) => Category {\n    throw new Error(\"Method not implemented.\");\n  }\n\n}"
        }
    ]
}