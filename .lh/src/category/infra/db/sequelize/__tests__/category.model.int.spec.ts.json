{
    "sourceFile": "src/category/infra/db/sequelize/__tests__/category.model.int.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 31,
            "patches": [
                {
                    "date": 1694796569352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1694803510730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,5 +21,9 @@\n       created_at: category.created_at,\n     })\n   })\n \n+  test(\"mapping props\", () => {\n+    const attributesMap = CategoryModel.getAttributes()\n+  })\n+\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694803524717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,16 +2,17 @@\n import { CategoryModel } from \"../category.model\";\n import { Category } from \"../../../../domain/category.entity\";\n \n describe('CategoryModel Integration Tests', () => {\n+  const sequelize = new Sequelize({\n+    dialect: 'sqlite',\n+    storage: ':memory:',\n+    models: [CategoryModel]\n+  })\n+  await sequelize.sync({ force: true })\n   test(\"should create a category\", async () => {\n-    const sequelize = new Sequelize({\n-      dialect: 'sqlite',\n-      storage: ':memory:',\n-      models: [CategoryModel]\n-    })\n-    await sequelize.sync({ force: true })\n \n+\n     const category = Category.fake().aCategory().build()\n \n     await CategoryModel.create({\n       category_id: category.category_id.id,\n"
                },
                {
                    "date": 1694803610250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,15 @@\n import { CategoryModel } from \"../category.model\";\n import { Category } from \"../../../../domain/category.entity\";\n \n describe('CategoryModel Integration Tests', () => {\n-  const sequelize = new Sequelize({\n-    dialect: 'sqlite',\n-    storage: ':memory:',\n-    models: [CategoryModel]\n+  let sequelize\n+  beforeEach(async () => {\n+    sequelize = new Sequelize({\n+      dialect: 'sqlite',\n+      storage: ':memory:',\n+      models: [CategoryModel]\n+    })\n   })\n   await sequelize.sync({ force: true })\n   test(\"should create a category\", async () => {\n \n"
                },
                {
                    "date": 1694803618105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,11 @@\n       dialect: 'sqlite',\n       storage: ':memory:',\n       models: [CategoryModel]\n     })\n+    await sequelize.sync({ force: true })\n   })\n-  await sequelize.sync({ force: true })\n+\n   test(\"should create a category\", async () => {\n \n \n     const category = Category.fake().aCategory().build()\n"
                },
                {
                    "date": 1694804786360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,7 +28,15 @@\n   })\n \n   test(\"mapping props\", () => {\n     const attributesMap = CategoryModel.getAttributes()\n+    const attributes = Object.keys(CategoryModel.getAttributes())\n+    expect(attributes).toStrictEqual([\n+      \"category_id\",\n+      \"name\",\n+      \"description\",\n+      \"is_active\",\n+      \"created_at\"\n+    ])\n   })\n \n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694804815337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,7 +36,9 @@\n       \"description\",\n       \"is_active\",\n       \"created_at\"\n     ])\n+\n+    const categoryIdAttr = attributesMap.category_id\n   })\n \n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694805023433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n   beforeEach(async () => {\n     sequelize = new Sequelize({\n       dialect: 'sqlite',\n       storage: ':memory:',\n+      logging: false,\n       models: [CategoryModel]\n     })\n     await sequelize.sync({ force: true })\n   })\n@@ -38,7 +39,10 @@\n       \"created_at\"\n     ])\n \n     const categoryIdAttr = attributesMap.category_id\n+    expect(categoryIdAttr).toMatchObject({\n+\n+    })\n   })\n \n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694807168193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Sequelize } from \"sequelize-typescript\";\n+import { DataType, Sequelize } from \"sequelize-typescript\";\n import { CategoryModel } from \"../category.model\";\n import { Category } from \"../../../../domain/category.entity\";\n \n describe('CategoryModel Integration Tests', () => {\n@@ -40,9 +40,12 @@\n     ])\n \n     const categoryIdAttr = attributesMap.category_id\n     expect(categoryIdAttr).toMatchObject({\n-\n+      field: \"category_id\",\n+      fieldName: \"category_id\",\n+      primaryKey: true,\n+      type: DataType.UUID()\n     })\n   })\n \n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694807623047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,7 +45,15 @@\n       fieldName: \"category_id\",\n       primaryKey: true,\n       type: DataType.UUID()\n     })\n+\n+    const nameAttr = attributesMap.category_id\n+    expect(categoryIdAttr).toMatchObject({\n+      field: \"name\",\n+      fieldName: \"name\",\n+      allowNull: false,\n+      type: DataType.STRING(255)\n+    })\n   })\n \n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694807897102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n       type: DataType.UUID()\n     })\n \n     const nameAttr = attributesMap.category_id\n-    expect(categoryIdAttr).toMatchObject({\n+    expect(nameAttr).toMatchObject({\n       field: \"name\",\n       fieldName: \"name\",\n       allowNull: false,\n       type: DataType.STRING(255)\n"
                },
                {
                    "date": 1694807904473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n       primaryKey: true,\n       type: DataType.UUID()\n     })\n \n-    const nameAttr = attributesMap.category_id\n+    const nameAttr = attributesMap.name\n     expect(nameAttr).toMatchObject({\n       field: \"name\",\n       fieldName: \"name\",\n       allowNull: false,\n"
                },
                {
                    "date": 1694807959928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,7 +53,15 @@\n       fieldName: \"name\",\n       allowNull: false,\n       type: DataType.STRING(255)\n     })\n+\n+    const descriptionAttr = attributesMap.description\n+    expect(nameAttr).toMatchObject({\n+      field: \"description\",\n+      fieldName: \"description\",\n+      allowNull: false,\n+      type: DataType.TEXT()\n+    })\n   })\n \n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694807967879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n       type: DataType.STRING(255)\n     })\n \n     const descriptionAttr = attributesMap.description\n-    expect(nameAttr).toMatchObject({\n+    expect(descriptionAttr).toMatchObject({\n       field: \"description\",\n       fieldName: \"description\",\n       allowNull: false,\n       type: DataType.TEXT()\n"
                },
                {
                    "date": 1694808177953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+import { DataType, Sequelize } from \"sequelize-typescript\";\n+import { CategoryModel } from \"../category.model\";\n+import { Category } from \"../../../../domain/category.entity\";\n+\n+describe('CategoryModel Integration Tests', () => {\n+  let sequelize\n+  beforeEach(async () => {\n+    sequelize = new Sequelize({\n+      dialect: 'sqlite',\n+      storage: ':memory:',\n+      logging: false,\n+      models: [CategoryModel]\n+    })\n+    await sequelize.sync({ force: true })\n+  })\n+\n+  test(\"should create a category\", async () => {\n+\n+\n+    const category = Category.fake().aCategory().build()\n+\n+    await CategoryModel.create({\n+      category_id: category.category_id.id,\n+      name: category.name,\n+      description: category.description,\n+      is_active: category.is_active,\n+      created_at: category.created_at,\n+    })\n+  })\n+\n+  test(\"mapping props\", () => {\n+    const attributesMap = CategoryModel.getAttributes()\n+    const attributes = Object.keys(CategoryModel.getAttributes())\n+    expect(attributes).toStrictEqual([\n+      \"category_id\",\n+      \"name\",\n+      \"description\",\n+      \"is_active\",\n+      \"created_at\"\n+    ])\n+\n+    const categoryIdAttr = attributesMap.category_id\n+    expect(categoryIdAttr).toMatchObject({\n+      field: \"category_id\",\n+      fieldName: \"category_id\",\n+      primaryKey: true,\n+      type: DataType.UUID()\n+    })\n+\n+    const nameAttr = attributesMap.name\n+    expect(nameAttr).toMatchObject({\n+      field: \"name\",\n+      fieldName: \"name\",\n+      allowNull: false,\n+      type: DataType.STRING(255)\n+    })\n+\n+    const descriptionAttr = attributesMap.description\n+    expect(descriptionAttr).toMatchObject({\n+      field: \"description\",\n+      fieldName: \"description\",\n+      allowNull: false,\n+      type: DataType.TEXT()\n+    })\n+\n+    const descriptionAttr = attributesMap.description\n+    expect(descriptionAttr).toMatchObject({\n+      field: \"description\",\n+      fieldName: \"description\",\n+      allowNull: false,\n+      type: DataType.BOOLEAN()\n+    })\n+  })\n+\n+})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694808197806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,84 +59,9 @@\n     expect(descriptionAttr).toMatchObject({\n       field: \"description\",\n       fieldName: \"description\",\n       allowNull: false,\n-      type: DataType.TEXT()\n-    })\n-\n-    const descriptionAttr = attributesMap.description\n-    expect(descriptionAttr).toMatchObject({\n-      field: \"description\",\n-      fieldName: \"description\",\n-      allowNull: false,\n       type: DataType.BOOLEAN()\n     })\n   })\n \n-})\n-import { DataType, Sequelize } from \"sequelize-typescript\";\n-import { CategoryModel } from \"../category.model\";\n-import { Category } from \"../../../../domain/category.entity\";\n-\n-describe('CategoryModel Integration Tests', () => {\n-  let sequelize\n-  beforeEach(async () => {\n-    sequelize = new Sequelize({\n-      dialect: 'sqlite',\n-      storage: ':memory:',\n-      logging: false,\n-      models: [CategoryModel]\n-    })\n-    await sequelize.sync({ force: true })\n-  })\n-\n-  test(\"should create a category\", async () => {\n-\n-\n-    const category = Category.fake().aCategory().build()\n-\n-    await CategoryModel.create({\n-      category_id: category.category_id.id,\n-      name: category.name,\n-      description: category.description,\n-      is_active: category.is_active,\n-      created_at: category.created_at,\n-    })\n-  })\n-\n-  test(\"mapping props\", () => {\n-    const attributesMap = CategoryModel.getAttributes()\n-    const attributes = Object.keys(CategoryModel.getAttributes())\n-    expect(attributes).toStrictEqual([\n-      \"category_id\",\n-      \"name\",\n-      \"description\",\n-      \"is_active\",\n-      \"created_at\"\n-    ])\n-\n-    const categoryIdAttr = attributesMap.category_id\n-    expect(categoryIdAttr).toMatchObject({\n-      field: \"category_id\",\n-      fieldName: \"category_id\",\n-      primaryKey: true,\n-      type: DataType.UUID()\n-    })\n-\n-    const nameAttr = attributesMap.name\n-    expect(nameAttr).toMatchObject({\n-      field: \"name\",\n-      fieldName: \"name\",\n-      allowNull: false,\n-      type: DataType.STRING(255)\n-    })\n-\n-    const descriptionAttr = attributesMap.description\n-    expect(descriptionAttr).toMatchObject({\n-      field: \"description\",\n-      fieldName: \"description\",\n-      allowNull: false,\n-      type: DataType.TEXT()\n-    })\n-  })\n-\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694808290177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,7 +61,15 @@\n       fieldName: \"description\",\n       allowNull: false,\n       type: DataType.BOOLEAN()\n     })\n+\n+    const isActiveAttr = attributesMap.is_active\n+    expect(isActiveAttr).toMatchObject({\n+      field: \"is_active\",\n+      fieldName: \"is_active\",\n+      allowNull: false,\n+      type: DataType.BOOLEAN()\n+    })\n   })\n \n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694808470685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,7 +69,15 @@\n       fieldName: \"is_active\",\n       allowNull: false,\n       type: DataType.BOOLEAN()\n     })\n+\n+    const createdaAttr = attributesMap.is_active\n+    expect(isActiveAttr).toMatchObject({\n+      field: \"is_active\",\n+      fieldName: \"is_active\",\n+      allowNull: false,\n+      type: DataType.BOOLEAN()\n+    })\n   })\n \n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694808480713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n       allowNull: false,\n       type: DataType.BOOLEAN()\n     })\n \n-    const createdaAttr = attributesMap.is_active\n+    const createdAttr = attributesMap.is_active\n     expect(isActiveAttr).toMatchObject({\n       field: \"is_active\",\n       fieldName: \"is_active\",\n       allowNull: false,\n"
                },
                {
                    "date": 1694808494612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+import { DataType, Sequelize } from \"sequelize-typescript\";\n+import { CategoryModel } from \"../category.model\";\n+import { Category } from \"../../../../domain/category.entity\";\n+\n+describe('CategoryModel Integration Tests', () => {\n+  let sequelize\n+  beforeEach(async () => {\n+    sequelize = new Sequelize({\n+      dialect: 'sqlite',\n+      storage: ':memory:',\n+      logging: false,\n+      models: [CategoryModel]\n+    })\n+    await sequelize.sync({ force: true })\n+  })\n+\n+  test(\"should create a category\", async () => {\n+\n+\n+    const category = Category.fake().aCategory().build()\n+\n+    await CategoryModel.create({\n+      category_id: category.category_id.id,\n+      name: category.name,\n+      description: category.description,\n+      is_active: category.is_active,\n+      created_at: category.created_at,\n+    })\n+  })\n+\n+  test(\"mapping props\", () => {\n+    const attributesMap = CategoryModel.getAttributes()\n+    const attributes = Object.keys(CategoryModel.getAttributes())\n+    expect(attributes).toStrictEqual([\n+      \"category_id\",\n+      \"name\",\n+      \"description\",\n+      \"is_active\",\n+      \"created_at\"\n+    ])\n+\n+    const categoryIdAttr = attributesMap.category_id\n+    expect(categoryIdAttr).toMatchObject({\n+      field: \"category_id\",\n+      fieldName: \"category_id\",\n+      primaryKey: true,\n+      type: DataType.UUID()\n+    })\n+\n+    const nameAttr = attributesMap.name\n+    expect(nameAttr).toMatchObject({\n+      field: \"name\",\n+      fieldName: \"name\",\n+      allowNull: false,\n+      type: DataType.STRING(255)\n+    })\n+\n+    const descriptionAttr = attributesMap.description\n+    expect(descriptionAttr).toMatchObject({\n+      field: \"description\",\n+      fieldName: \"description\",\n+      allowNull: false,\n+      type: DataType.BOOLEAN()\n+    })\n+\n+    const isActiveAttr = attributesMap.is_active\n+    expect(isActiveAttr).toMatchObject({\n+      field: \"is_active\",\n+      fieldName: \"is_active\",\n+      allowNull: false,\n+      type: DataType.BOOLEAN()\n+    })\n+\n+    const createdAtAttr = attributesMap.is_active\n+    expect(isActiveAttr).toMatchObject({\n+      field: \"is_active\",\n+      fieldName: \"is_active\",\n+      allowNull: false,\n+      type: DataType.BOOLEAN()\n+    })\n+  })\n+\n+})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694808519550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+import { DataType, Sequelize } from \"sequelize-typescript\";\n+import { CategoryModel } from \"../category.model\";\n+import { Category } from \"../../../../domain/category.entity\";\n+\n+describe('CategoryModel Integration Tests', () => {\n+  let sequelize\n+  beforeEach(async () => {\n+    sequelize = new Sequelize({\n+      dialect: 'sqlite',\n+      storage: ':memory:',\n+      logging: false,\n+      models: [CategoryModel]\n+    })\n+    await sequelize.sync({ force: true })\n+  })\n+\n+  test(\"should create a category\", async () => {\n+\n+\n+    const category = Category.fake().aCategory().build()\n+\n+    await CategoryModel.create({\n+      category_id: category.category_id.id,\n+      name: category.name,\n+      description: category.description,\n+      is_active: category.is_active,\n+      created_at: category.created_at,\n+    })\n+  })\n+\n+  test(\"mapping props\", () => {\n+    const attributesMap = CategoryModel.getAttributes()\n+    const attributes = Object.keys(CategoryModel.getAttributes())\n+    expect(attributes).toStrictEqual([\n+      \"category_id\",\n+      \"name\",\n+      \"description\",\n+      \"is_active\",\n+      \"created_at\"\n+    ])\n+\n+    const categoryIdAttr = attributesMap.category_id\n+    expect(categoryIdAttr).toMatchObject({\n+      field: \"category_id\",\n+      fieldName: \"category_id\",\n+      primaryKey: true,\n+      type: DataType.UUID()\n+    })\n+\n+    const nameAttr = attributesMap.name\n+    expect(nameAttr).toMatchObject({\n+      field: \"name\",\n+      fieldName: \"name\",\n+      allowNull: false,\n+      type: DataType.STRING(255)\n+    })\n+\n+    const descriptionAttr = attributesMap.description\n+    expect(descriptionAttr).toMatchObject({\n+      field: \"description\",\n+      fieldName: \"description\",\n+      allowNull: false,\n+      type: DataType.BOOLEAN()\n+    })\n+\n+    const isActiveAttr = attributesMap.is_active\n+    expect(isActiveAttr).toMatchObject({\n+      field: \"is_active\",\n+      fieldName: \"is_active\",\n+      allowNull: false,\n+      type: DataType.BOOLEAN()\n+    })\n+\n+    const createdAtAttr = attributesMap.is_active\n+    expect(isActiveAttr).toMatchObject({\n+      field: \"is_active\",\n+      fieldName: \"is_active\",\n+      allowNull: false,\n+      type: DataType.DATE(3)\n+    })\n+  })\n+\n+})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694808538611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+import { DataType, Sequelize } from \"sequelize-typescript\";\n+import { CategoryModel } from \"../category.model\";\n+import { Category } from \"../../../../domain/category.entity\";\n+\n+describe('CategoryModel Integration Tests', () => {\n+  let sequelize\n+  beforeEach(async () => {\n+    sequelize = new Sequelize({\n+      dialect: 'sqlite',\n+      storage: ':memory:',\n+      logging: false,\n+      models: [CategoryModel]\n+    })\n+    await sequelize.sync({ force: true })\n+  })\n+\n+  test(\"should create a category\", async () => {\n+\n+\n+    const category = Category.fake().aCategory().build()\n+\n+    await CategoryModel.create({\n+      category_id: category.category_id.id,\n+      name: category.name,\n+      description: category.description,\n+      is_active: category.is_active,\n+      created_at: category.created_at,\n+    })\n+  })\n+\n+  test(\"mapping props\", () => {\n+    const attributesMap = CategoryModel.getAttributes()\n+    const attributes = Object.keys(CategoryModel.getAttributes())\n+    expect(attributes).toStrictEqual([\n+      \"category_id\",\n+      \"name\",\n+      \"description\",\n+      \"is_active\",\n+      \"created_at\"\n+    ])\n+\n+    const categoryIdAttr = attributesMap.category_id\n+    expect(categoryIdAttr).toMatchObject({\n+      field: \"category_id\",\n+      fieldName: \"category_id\",\n+      primaryKey: true,\n+      type: DataType.UUID()\n+    })\n+\n+    const nameAttr = attributesMap.name\n+    expect(nameAttr).toMatchObject({\n+      field: \"name\",\n+      fieldName: \"name\",\n+      allowNull: false,\n+      type: DataType.STRING(255)\n+    })\n+\n+    const descriptionAttr = attributesMap.description\n+    expect(descriptionAttr).toMatchObject({\n+      field: \"description\",\n+      fieldName: \"description\",\n+      allowNull: false,\n+      type: DataType.BOOLEAN()\n+    })\n+\n+    const isActiveAttr = attributesMap.is_active\n+    expect(isActiveAttr).toMatchObject({\n+      field: \"is_active\",\n+      fieldName: \"is_active\",\n+      allowNull: false,\n+      type: DataType.BOOLEAN()\n+    })\n+\n+    const createdAtAttr = attributesMap.created_at\n+    expect(isActiveAttr).toMatchObject({\n+      field: \"created_at\",\n+      fieldName: \"created_at\",\n+      allowNull: false,\n+      type: DataType.DATE(3)\n+    })\n+  })\n+\n+})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694808552762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,262 +71,13 @@\n       type: DataType.BOOLEAN()\n     })\n \n     const createdAtAttr = attributesMap.created_at\n-    expect(isActiveAttr).toMatchObject({\n+    expect(createdAtAttr).toMatchObject({\n       field: \"created_at\",\n       fieldName: \"created_at\",\n       allowNull: false,\n       type: DataType.DATE(3)\n     })\n   })\n \n-})\n-import { DataType, Sequelize } from \"sequelize-typescript\";\n-import { CategoryModel } from \"../category.model\";\n-import { Category } from \"../../../../domain/category.entity\";\n-\n-describe('CategoryModel Integration Tests', () => {\n-  let sequelize\n-  beforeEach(async () => {\n-    sequelize = new Sequelize({\n-      dialect: 'sqlite',\n-      storage: ':memory:',\n-      logging: false,\n-      models: [CategoryModel]\n-    })\n-    await sequelize.sync({ force: true })\n-  })\n-\n-  test(\"should create a category\", async () => {\n-\n-\n-    const category = Category.fake().aCategory().build()\n-\n-    await CategoryModel.create({\n-      category_id: category.category_id.id,\n-      name: category.name,\n-      description: category.description,\n-      is_active: category.is_active,\n-      created_at: category.created_at,\n-    })\n-  })\n-\n-  test(\"mapping props\", () => {\n-    const attributesMap = CategoryModel.getAttributes()\n-    const attributes = Object.keys(CategoryModel.getAttributes())\n-    expect(attributes).toStrictEqual([\n-      \"category_id\",\n-      \"name\",\n-      \"description\",\n-      \"is_active\",\n-      \"created_at\"\n-    ])\n-\n-    const categoryIdAttr = attributesMap.category_id\n-    expect(categoryIdAttr).toMatchObject({\n-      field: \"category_id\",\n-      fieldName: \"category_id\",\n-      primaryKey: true,\n-      type: DataType.UUID()\n-    })\n-\n-    const nameAttr = attributesMap.name\n-    expect(nameAttr).toMatchObject({\n-      field: \"name\",\n-      fieldName: \"name\",\n-      allowNull: false,\n-      type: DataType.STRING(255)\n-    })\n-\n-    const descriptionAttr = attributesMap.description\n-    expect(descriptionAttr).toMatchObject({\n-      field: \"description\",\n-      fieldName: \"description\",\n-      allowNull: false,\n-      type: DataType.BOOLEAN()\n-    })\n-\n-    const isActiveAttr = attributesMap.is_active\n-    expect(isActiveAttr).toMatchObject({\n-      field: \"is_active\",\n-      fieldName: \"is_active\",\n-      allowNull: false,\n-      type: DataType.BOOLEAN()\n-    })\n-\n-    const createdAtAttr = attributesMap.is_active\n-    expect(isActiveAttr).toMatchObject({\n-      field: \"is_active\",\n-      fieldName: \"is_active\",\n-      allowNull: false,\n-      type: DataType.DATE(3)\n-    })\n-  })\n-\n-})\n-import { DataType, Sequelize } from \"sequelize-typescript\";\n-import { CategoryModel } from \"../category.model\";\n-import { Category } from \"../../../../domain/category.entity\";\n-\n-describe('CategoryModel Integration Tests', () => {\n-  let sequelize\n-  beforeEach(async () => {\n-    sequelize = new Sequelize({\n-      dialect: 'sqlite',\n-      storage: ':memory:',\n-      logging: false,\n-      models: [CategoryModel]\n-    })\n-    await sequelize.sync({ force: true })\n-  })\n-\n-  test(\"should create a category\", async () => {\n-\n-\n-    const category = Category.fake().aCategory().build()\n-\n-    await CategoryModel.create({\n-      category_id: category.category_id.id,\n-      name: category.name,\n-      description: category.description,\n-      is_active: category.is_active,\n-      created_at: category.created_at,\n-    })\n-  })\n-\n-  test(\"mapping props\", () => {\n-    const attributesMap = CategoryModel.getAttributes()\n-    const attributes = Object.keys(CategoryModel.getAttributes())\n-    expect(attributes).toStrictEqual([\n-      \"category_id\",\n-      \"name\",\n-      \"description\",\n-      \"is_active\",\n-      \"created_at\"\n-    ])\n-\n-    const categoryIdAttr = attributesMap.category_id\n-    expect(categoryIdAttr).toMatchObject({\n-      field: \"category_id\",\n-      fieldName: \"category_id\",\n-      primaryKey: true,\n-      type: DataType.UUID()\n-    })\n-\n-    const nameAttr = attributesMap.name\n-    expect(nameAttr).toMatchObject({\n-      field: \"name\",\n-      fieldName: \"name\",\n-      allowNull: false,\n-      type: DataType.STRING(255)\n-    })\n-\n-    const descriptionAttr = attributesMap.description\n-    expect(descriptionAttr).toMatchObject({\n-      field: \"description\",\n-      fieldName: \"description\",\n-      allowNull: false,\n-      type: DataType.BOOLEAN()\n-    })\n-\n-    const isActiveAttr = attributesMap.is_active\n-    expect(isActiveAttr).toMatchObject({\n-      field: \"is_active\",\n-      fieldName: \"is_active\",\n-      allowNull: false,\n-      type: DataType.BOOLEAN()\n-    })\n-\n-    const createdAtAttr = attributesMap.is_active\n-    expect(isActiveAttr).toMatchObject({\n-      field: \"is_active\",\n-      fieldName: \"is_active\",\n-      allowNull: false,\n-      type: DataType.BOOLEAN()\n-    })\n-  })\n-\n-})\n-import { DataType, Sequelize } from \"sequelize-typescript\";\n-import { CategoryModel } from \"../category.model\";\n-import { Category } from \"../../../../domain/category.entity\";\n-\n-describe('CategoryModel Integration Tests', () => {\n-  let sequelize\n-  beforeEach(async () => {\n-    sequelize = new Sequelize({\n-      dialect: 'sqlite',\n-      storage: ':memory:',\n-      logging: false,\n-      models: [CategoryModel]\n-    })\n-    await sequelize.sync({ force: true })\n-  })\n-\n-  test(\"should create a category\", async () => {\n-\n-\n-    const category = Category.fake().aCategory().build()\n-\n-    await CategoryModel.create({\n-      category_id: category.category_id.id,\n-      name: category.name,\n-      description: category.description,\n-      is_active: category.is_active,\n-      created_at: category.created_at,\n-    })\n-  })\n-\n-  test(\"mapping props\", () => {\n-    const attributesMap = CategoryModel.getAttributes()\n-    const attributes = Object.keys(CategoryModel.getAttributes())\n-    expect(attributes).toStrictEqual([\n-      \"category_id\",\n-      \"name\",\n-      \"description\",\n-      \"is_active\",\n-      \"created_at\"\n-    ])\n-\n-    const categoryIdAttr = attributesMap.category_id\n-    expect(categoryIdAttr).toMatchObject({\n-      field: \"category_id\",\n-      fieldName: \"category_id\",\n-      primaryKey: true,\n-      type: DataType.UUID()\n-    })\n-\n-    const nameAttr = attributesMap.name\n-    expect(nameAttr).toMatchObject({\n-      field: \"name\",\n-      fieldName: \"name\",\n-      allowNull: false,\n-      type: DataType.STRING(255)\n-    })\n-\n-    const descriptionAttr = attributesMap.description\n-    expect(descriptionAttr).toMatchObject({\n-      field: \"description\",\n-      fieldName: \"description\",\n-      allowNull: false,\n-      type: DataType.BOOLEAN()\n-    })\n-\n-    const isActiveAttr = attributesMap.is_active\n-    expect(isActiveAttr).toMatchObject({\n-      field: \"is_active\",\n-      fieldName: \"is_active\",\n-      allowNull: false,\n-      type: DataType.BOOLEAN()\n-    })\n-\n-    const createdAttr = attributesMap.is_active\n-    expect(isActiveAttr).toMatchObject({\n-      field: \"is_active\",\n-      fieldName: \"is_active\",\n-      allowNull: false,\n-      type: DataType.BOOLEAN()\n-    })\n-  })\n-\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694808878709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import { DataType, Sequelize } from \"sequelize-typescript\";\n+import { CategoryModel } from \"../category.model\";\n+import { Category } from \"../../../../domain/category.entity\";\n+\n+describe('CategoryModel Integration Tests', () => {\n+  let sequelize\n+  beforeEach(async () => {\n+    sequelize = new Sequelize({\n+      dialect: 'sqlite',\n+      storage: ':memory:',\n+      logging: false,\n+      models: [CategoryModel]\n+    })\n+    await sequelize.sync({ force: true })\n+  })\n+\n+  test(\"should create a category\", async () => {\n+\n+\n+    const category = Category.fake().aCategory().build()\n+\n+    await CategoryModel.create({\n+      category_id: category.category_id.id,\n+      name: category.name,\n+      description: category.description,\n+      is_active: category.is_active,\n+      created_at: category.created_at,\n+    })\n+  })\n+\n+  test(\"mapping props\", () => {\n+    const attributesMap = CategoryModel.getAttributes()\n+    const attributes = Object.keys(CategoryModel.getAttributes())\n+    expect(attributes).toStrictEqual([\n+      \"category_id\",\n+      \"name\",\n+      \"description\",\n+      \"is_active\",\n+      \"created_at\"\n+    ])\n+\n+    const categoryIdAttr = attributesMap.category_id\n+    expect(categoryIdAttr).toMatchObject({\n+      field: \"category_id\",\n+      fieldName: \"category_id\",\n+      primaryKey: true,\n+      type: DataType.UUID()\n+    })\n+\n+    const nameAttr = attributesMap.name\n+    expect(nameAttr).toMatchObject({\n+      field: \"name\",\n+      fieldName: \"name\",\n+      allowNull: false,\n+      type: DataType.STRING(255)\n+    })\n+\n+    const descriptionAttr = attributesMap.description\n+    expect(descriptionAttr).toMatchObject({\n+      field: \"description\",\n+      fieldName: \"description\",\n+      allowNull: false,\n+      type: DataType.BOOLEAN()\n+    })\n+\n+    const isActiveAttr = attributesMap.is_active\n+    expect(isActiveAttr).toMatchObject({\n+      field: \"is_active\",\n+      fieldName: \"is_active\",\n+      allowNull: false,\n+      type: DataType.BOOLEAN()\n+    })\n+\n+    const createdAtAttr = attributesMap.created_at\n+    expect(createdAtAttr).toMatchObject({\n+      field: \"created_at\",\n+      fieldName: \"created_at\",\n+      allowNull: false,\n+      type: DataType.DATE(3)\n+    })\n+  })\n+\n+  test(\"create\", async () => {\n+    //arrange\n+    const arrange = {\n+      category_id: \"9366b7dc-2d71-4799-b91c-c64adb205104\",\n+      name: \"test\",\n+      is_active: true,\n+      created_at: new Date(),\n+    };\n+\n+    //act\n+    const category = await CategoryModel.create(arrange);\n+\n+    //assert\n+    expect(category.toJSON()).toStrictEqual(arrange);\n+  });\n+\n+})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694809652170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n     const descriptionAttr = attributesMap.description\n     expect(descriptionAttr).toMatchObject({\n       field: \"description\",\n       fieldName: \"description\",\n-      allowNull: false,\n+      allowNull: true,\n       type: DataType.BOOLEAN()\n     })\n \n     const isActiveAttr = attributesMap.is_active\n"
                },
                {
                    "date": 1694988516047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,11 @@\n import { DataType, Sequelize } from \"sequelize-typescript\";\n import { CategoryModel } from \"../category.model\";\n import { Category } from \"../../../../domain/category.entity\";\n+import { setupSequelize } from \"../../../../../shared/infra/testing/herpers\";\n \n describe('CategoryModel Integration Tests', () => {\n-  let sequelize\n-  beforeEach(async () => {\n-    sequelize = new Sequelize({\n-      dialect: 'sqlite',\n-      storage: ':memory:',\n-      logging: false,\n-      models: [CategoryModel]\n-    })\n-    await sequelize.sync({ force: true })\n-  })\n+  setupSequelize()\n \n   test(\"should create a category\", async () => {\n \n \n@@ -95,88 +87,5 @@\n     //assert\n     expect(category.toJSON()).toStrictEqual(arrange);\n   });\n \n-})\n-import { DataType, Sequelize } from \"sequelize-typescript\";\n-import { CategoryModel } from \"../category.model\";\n-import { Category } from \"../../../../domain/category.entity\";\n-\n-describe('CategoryModel Integration Tests', () => {\n-  let sequelize\n-  beforeEach(async () => {\n-    sequelize = new Sequelize({\n-      dialect: 'sqlite',\n-      storage: ':memory:',\n-      logging: false,\n-      models: [CategoryModel]\n-    })\n-    await sequelize.sync({ force: true })\n-  })\n-\n-  test(\"should create a category\", async () => {\n-\n-\n-    const category = Category.fake().aCategory().build()\n-\n-    await CategoryModel.create({\n-      category_id: category.category_id.id,\n-      name: category.name,\n-      description: category.description,\n-      is_active: category.is_active,\n-      created_at: category.created_at,\n-    })\n-  })\n-\n-  test(\"mapping props\", () => {\n-    const attributesMap = CategoryModel.getAttributes()\n-    const attributes = Object.keys(CategoryModel.getAttributes())\n-    expect(attributes).toStrictEqual([\n-      \"category_id\",\n-      \"name\",\n-      \"description\",\n-      \"is_active\",\n-      \"created_at\"\n-    ])\n-\n-    const categoryIdAttr = attributesMap.category_id\n-    expect(categoryIdAttr).toMatchObject({\n-      field: \"category_id\",\n-      fieldName: \"category_id\",\n-      primaryKey: true,\n-      type: DataType.UUID()\n-    })\n-\n-    const nameAttr = attributesMap.name\n-    expect(nameAttr).toMatchObject({\n-      field: \"name\",\n-      fieldName: \"name\",\n-      allowNull: false,\n-      type: DataType.STRING(255)\n-    })\n-\n-    const descriptionAttr = attributesMap.description\n-    expect(descriptionAttr).toMatchObject({\n-      field: \"description\",\n-      fieldName: \"description\",\n-      allowNull: false,\n-      type: DataType.BOOLEAN()\n-    })\n-\n-    const isActiveAttr = attributesMap.is_active\n-    expect(isActiveAttr).toMatchObject({\n-      field: \"is_active\",\n-      fieldName: \"is_active\",\n-      allowNull: false,\n-      type: DataType.BOOLEAN()\n-    })\n-\n-    const createdAtAttr = attributesMap.created_at\n-    expect(createdAtAttr).toMatchObject({\n-      field: \"created_at\",\n-      fieldName: \"created_at\",\n-      allowNull: false,\n-      type: DataType.DATE(3)\n-    })\n-  })\n-\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694988541163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,19 @@\n import { DataType, Sequelize } from \"sequelize-typescript\";\n import { CategoryModel } from \"../category.model\";\n import { Category } from \"../../../../domain/category.entity\";\n-import { setupSequelize } from \"../../../../../shared/infra/testing/herpers\";\n \n describe('CategoryModel Integration Tests', () => {\n-  setupSequelize()\n+  let sequelize\n+  beforeEach(async () => {\n+    sequelize = new Sequelize({\n+      dialect: 'sqlite',\n+      storage: ':memory:',\n+      logging: false,\n+      models: [CategoryModel]\n+    })\n+    await sequelize.sync({ force: true })\n+  })\n \n   test(\"should create a category\", async () => {\n \n \n"
                },
                {
                    "date": 1694988585193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,11 @@\n import { DataType, Sequelize } from \"sequelize-typescript\";\n import { CategoryModel } from \"../category.model\";\n import { Category } from \"../../../../domain/category.entity\";\n+import { setupSequelize } from \"../../../../../shared/infra/testing/herpers\";\n \n describe('CategoryModel Integration Tests', () => {\n-  let sequelize\n-  beforeEach(async () => {\n-    sequelize = new Sequelize({\n-      dialect: 'sqlite',\n-      storage: ':memory:',\n-      logging: false,\n-      models: [CategoryModel]\n-    })\n-    await sequelize.sync({ force: true })\n-  })\n+  setupSequelize()\n \n   test(\"should create a category\", async () => {\n \n \n"
                },
                {
                    "date": 1694988667147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,19 @@\n import { DataType, Sequelize } from \"sequelize-typescript\";\n import { CategoryModel } from \"../category.model\";\n import { Category } from \"../../../../domain/category.entity\";\n-import { setupSequelize } from \"../../../../../shared/infra/testing/herpers\";\n \n describe('CategoryModel Integration Tests', () => {\n-  setupSequelize()\n+  let sequelize\n+  beforeEach(async () => {\n+    sequelize = new Sequelize({\n+      dialect: 'sqlite',\n+      storage: ':memory:',\n+      logging: false,\n+      models: [CategoryModel]\n+    })\n+    await sequelize.sync({ force: true })\n+  })\n \n   test(\"should create a category\", async () => {\n \n \n"
                },
                {
                    "date": 1694997623007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,19 +2,9 @@\n import { CategoryModel } from \"../category.model\";\n import { Category } from \"../../../../domain/category.entity\";\n \n describe('CategoryModel Integration Tests', () => {\n-  let sequelize\n-  beforeEach(async () => {\n-    sequelize = new Sequelize({\n-      dialect: 'sqlite',\n-      storage: ':memory:',\n-      logging: false,\n-      models: [CategoryModel]\n-    })\n-    await sequelize.sync({ force: true })\n-  })\n-\n+  setupSequelize({ models: [CategoryModel] });\n   test(\"should create a category\", async () => {\n \n \n     const category = Category.fake().aCategory().build()\n"
                },
                {
                    "date": 1694997907977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,12 @@\n import { DataType, Sequelize } from \"sequelize-typescript\";\n import { CategoryModel } from \"../category.model\";\n import { Category } from \"../../../../domain/category.entity\";\n+import { setupSequelize } from \"../../../../../shared/infra/testing/herpers\";\n \n describe('CategoryModel Integration Tests', () => {\n   setupSequelize({ models: [CategoryModel] });\n+\n   test(\"should create a category\", async () => {\n \n \n     const category = Category.fake().aCategory().build()\n"
                },
                {
                    "date": 1694997917101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { DataType, Sequelize } from \"sequelize-typescript\";\n+import { DataType } from \"sequelize-typescript\";\n import { CategoryModel } from \"../category.model\";\n import { Category } from \"../../../../domain/category.entity\";\n import { setupSequelize } from \"../../../../../shared/infra/testing/herpers\";\n \n"
                }
            ],
            "date": 1694796569351,
            "name": "Commit-0",
            "content": "import { Sequelize } from \"sequelize-typescript\";\nimport { CategoryModel } from \"../category.model\";\nimport { Category } from \"../../../../domain/category.entity\";\n\ndescribe('CategoryModel Integration Tests', () => {\n  test(\"should create a category\", async () => {\n    const sequelize = new Sequelize({\n      dialect: 'sqlite',\n      storage: ':memory:',\n      models: [CategoryModel]\n    })\n    await sequelize.sync({ force: true })\n\n    const category = Category.fake().aCategory().build()\n\n    await CategoryModel.create({\n      category_id: category.category_id.id,\n      name: category.name,\n      description: category.description,\n      is_active: category.is_active,\n      created_at: category.created_at,\n    })\n  })\n\n})"
        }
    ]
}