{
    "sourceFile": "src/category/infra/db/sequelize/__tests__/category-model-mapper.int.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1694965683315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1694966195495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n   })\n \n   it(\"should throws error when category is invalid\", () => {\n     const model = CategoryModel.build({\n-      category_id: \"9366b7dc-2d71-4799-b91c-c64adb205104\",\n+      category_id: \"9366b7dc-2d71-4799-b91c-c64adb205456\",\n     });\n     try {\n       CategoryModelMapper.toEntity(model);\n       fail(\n"
                },
                {
                    "date": 1694998307128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,20 +5,10 @@\n import { CategoryModelMapper } from \"../category-mapper\";\n import { CategoryModel } from \"../category.model\";\n \n describe(\"CategoryModelMapper Integration Tests\", () => {\n-  let sequelize\n+  setupSequelize({ models: [CategoryModel] });\n \n-  beforeEach(async () => {\n-    sequelize = new Sequelize({\n-      dialect: \"sqlite\",\n-      storage: \":memory:\",\n-      models: [CategoryModel],\n-      logging: false\n-    })\n-    await sequelize.sync({ force: true })\n-  })\n-\n   it(\"should throws error when category is invalid\", () => {\n     const model = CategoryModel.build({\n       category_id: \"9366b7dc-2d71-4799-b91c-c64adb205456\",\n     });\n"
                },
                {
                    "date": 1694998315492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { Uuid } from \"../../../../../shared/domain/value-objects/uuid.vo\";\n import { Category } from \"../../../../domain/category.entity\";\n import { CategoryModelMapper } from \"../category-mapper\";\n import { CategoryModel } from \"../category.model\";\n+import { setupSequelize } from \"../../../../../shared/infra/testing/herpers\";\n \n describe(\"CategoryModelMapper Integration Tests\", () => {\n   setupSequelize({ models: [CategoryModel] });\n \n"
                }
            ],
            "date": 1694965683315,
            "name": "Commit-0",
            "content": "import { Sequelize } from \"sequelize-typescript\";\nimport { EntityValidationError } from \"../../../../../shared/domain/validators/valitation.error\";\nimport { Uuid } from \"../../../../../shared/domain/value-objects/uuid.vo\";\nimport { Category } from \"../../../../domain/category.entity\";\nimport { CategoryModelMapper } from \"../category-mapper\";\nimport { CategoryModel } from \"../category.model\";\n\ndescribe(\"CategoryModelMapper Integration Tests\", () => {\n  let sequelize\n\n  beforeEach(async () => {\n    sequelize = new Sequelize({\n      dialect: \"sqlite\",\n      storage: \":memory:\",\n      models: [CategoryModel],\n      logging: false\n    })\n    await sequelize.sync({ force: true })\n  })\n\n  it(\"should throws error when category is invalid\", () => {\n    const model = CategoryModel.build({\n      category_id: \"9366b7dc-2d71-4799-b91c-c64adb205104\",\n    });\n    try {\n      CategoryModelMapper.toEntity(model);\n      fail(\n        \"The category is valid, but it needs throws a EntityValidationError\"\n      );\n    } catch (e) {\n      expect(e).toBeInstanceOf(EntityValidationError);\n      expect((e as EntityValidationError).error).toMatchObject({\n        name: [\n          \"name should not be empty\",\n          \"name must be a string\",\n          \"name must be shorter than or equal to 255 characters\",\n        ],\n      });\n    }\n  });\n\n  it(\"should convert a category model to a category aggregate\", () => {\n    const created_at = new Date();\n    const model = CategoryModel.build({\n      category_id: \"5490020a-e866-4229-9adc-aa44b83234c4\",\n      name: \"some value\",\n      description: \"some description\",\n      is_active: true,\n      created_at,\n    });\n    const aggregate = CategoryModelMapper.toEntity(model);\n    expect(aggregate.toJSON()).toStrictEqual(\n      new Category({\n        category_id: new Uuid(\"5490020a-e866-4229-9adc-aa44b83234c4\"),\n        name: \"some value\",\n        description: \"some description\",\n        is_active: true,\n        created_at,\n      }).toJSON()\n    );\n  });\n\n  test(\"should convert a category aggregate to a category model\", () => {\n    const created_at = new Date();\n    const aggregate = new Category({\n      category_id: new Uuid(\"5490020a-e866-4229-9adc-aa44b83234c4\"),\n      name: \"some value\",\n      description: \"some description\",\n      is_active: true,\n      created_at,\n    });\n    const model = CategoryModelMapper.toModel(aggregate);\n    expect(model.toJSON()).toStrictEqual({\n      category_id: \"5490020a-e866-4229-9adc-aa44b83234c4\",\n      name: \"some value\",\n      description: \"some description\",\n      is_active: true,\n      created_at,\n    });\n  });\n});\n"
        }
    ]
}